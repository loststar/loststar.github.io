<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Jupyter Notebook修改默认路径</title>
    <url>/posts/eccdc33c/</url>
    <content><![CDATA[<p>Jupyter Notebook默认打开的路径是<code>C:/Users/用户名</code>，这非常不方便。修改的方法有两种。</p>
<h2 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h2><p>找到Jupyter Notebook的快捷方式，将路径中的<code>%USERPROFILE%</code>改成想要作为根目录的地址。</p>
<p><img src="/posts/eccdc33c/link.jpg"></p>
<h2 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h2><p>本方法参考了<a href="https://www.zhihu.com/question/31600197">ipython notebook 如何修改一开始打开的文件夹路径？- 知乎</a></p>
<ol>
<li>打开<code>C:/Users/你的账户/.jupyter/</code>看看是否存在<code>jupyter_notebook_config.py</code>，如果有，跳到3</li>
<li>如果没有，在命令行输入<code> jupyter notebook --generate-config</code></li>
<li>打开<code>C:/Users/你的账户/.jupyter/jupyter_notebook_config.py</code></li>
<li>找到<code>#c.NotebookApp.notebook_dir = &#39;&#39;</code></li>
<li>删除井号，引号内改为需要的路径</li>
<li>删除快捷方式里面的<code>%USERPROFILE%</code>（非常重要，否则路径不会改变，当时在这里迷惑了很久）</li>
</ol>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>方法记录</category>
      </categories>
      <tags>
        <tag>JupyterNotebook</tag>
      </tags>
  </entry>
  <entry>
    <title>MIT 6.830 Lab 2: SimpleDB Operators</title>
    <url>/posts/fba26ec9/</url>
    <content><![CDATA[<p>其他 MIT 6.830 的实验记录请查看：<a href="http://loststar.tech/categories/%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A/MIT-6-830/">Lab | MIT 6.830 | Loststar’s blog</a></p>
<p>课程官网：<a href="http://dsg.csail.mit.edu/6.830/">6.830/6.814: Database Systems (mit.edu)</a></p>
<p>框架代码仓库：<a href="https://github.com/MIT-DB-Class/simple-db-hw-2021">MIT-DB-Class/simple-db-hw-2021 (github.com)</a></p>
<p>对应的单元测试：</p>
<table>
<thead>
<tr>
<th>练习</th>
<th>单元测试</th>
</tr>
</thead>
<tbody><tr>
<td>Exercise 1</td>
<td>PredicateTest / JoinPredicateTest / FilterTest / JoinTest / FilterTest (systest) / JoinTest (systest)</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h1 id="Exercise-1-Filter-and-Join"><a href="#Exercise-1-Filter-and-Join" class="headerlink" title="Exercise 1: Filter and Join"></a>Exercise 1: Filter and Join</h1><p><code>Predicate</code> 系列通过对比字段运算结果筛选出符合要求的<code>Tuple</code></p>
<p>实验涉及文件：</p>
<ul>
<li><p>src/java/simpledb/execution/Predicate.java</p>
</li>
<li><p>src/java/simpledb/execution/JoinPredicate.java</p>
</li>
<li><p>src/java/simpledb/execution/Filter.java</p>
</li>
<li><p>src/java/simpledb/execution/Join.java</p>
</li>
</ul>
<h2 id="Predicate"><a href="#Predicate" class="headerlink" title="Predicate"></a>Predicate</h2><p><strong>比较：</strong></p>
<p>调用<code>Field</code>的<code>compare</code>方法。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * Compares the field number of t specified in the constructor to the
 * operand field specified in the constructor using the operator specific in
 * the constructor. The comparison can be made through Field's compare
 * method.
 *
 * @param t The tuple to compare against
 * @return true if the comparison is true, false otherwise.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">Tuple</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// some code goes here</span>
    <span class="token keyword">return</span> t<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> operand<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="JoinPredicate"><a href="#JoinPredicate" class="headerlink" title="JoinPredicate"></a>JoinPredicate</h2><p><strong>比较：</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * Apply the predicate to the two specified tuples. The comparison can be
 * made through Field's compare method.
 *
 * @return true if the tuples satisfy the predicate.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">Tuple</span> t1<span class="token punctuation">,</span> <span class="token class-name">Tuple</span> t2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// some code goes here</span>
    <span class="token keyword">return</span> t1<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span>field1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> t2<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span>field2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h2><p><strong>开/关/重置：</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">DbException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">,</span>
        <span class="token class-name">TransactionAbortedException</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// some code goes here</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    child<span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// some code goes here</span>
    child<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rewind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">DbException</span><span class="token punctuation">,</span> <span class="token class-name">TransactionAbortedException</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// some code goes here</span>
    child<span class="token punctuation">.</span><span class="token function">rewind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>fetchNext：</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * AbstractDbIterator.readNext implementation. Iterates over tuples from the
 * child operator, applying the predicate to them and returning those that
 * pass the predicate (i.e. for which the Predicate.filter() returns true.)
 *
 * @return The next tuple that passes the filter, or null if there are no
 * more tuples
 * @see Predicate#filter
 */</span>
<span class="token keyword">protected</span> <span class="token class-name">Tuple</span> <span class="token function">fetchNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">,</span>
        <span class="token class-name">TransactionAbortedException</span><span class="token punctuation">,</span> <span class="token class-name">DbException</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// some code goes here</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>child<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Tuple</span> tuple <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>predicate<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>tuple<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> tuple<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="Join"><a href="#Join" class="headerlink" title="Join"></a>Join</h2><p><strong>变量定义：</strong></p>
<p>因为连接后的<code>TupleDesc</code>不止使用一次，就在这里定义了。</p>
<p><code>t1</code>见后面<code>fetchNext</code>部分。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">JoinPredicate</span> joinPredicate<span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token class-name">OpIterator</span> child1<span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token class-name">OpIterator</span> child2<span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token class-name">Tuple</span> t1<span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token class-name">TupleDesc</span> newTupleDesc<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>构造方法：</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * Constructor. Accepts two children to join and the predicate to join them on
 *
 * @param p      The predicate to use to join the children
 * @param child1 Iterator for the left(outer) relation to join
 * @param child2 Iterator for the right(inner) relation to join
 */</span>
<span class="token keyword">public</span> <span class="token class-name">Join</span><span class="token punctuation">(</span><span class="token class-name">JoinPredicate</span> p<span class="token punctuation">,</span> <span class="token class-name">OpIterator</span> child1<span class="token punctuation">,</span> <span class="token class-name">OpIterator</span> child2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// some code goes here</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>joinPredicate <span class="token operator">=</span> p<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>child1 <span class="token operator">=</span> child1<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>child2 <span class="token operator">=</span> child2<span class="token punctuation">;</span>
    t1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    newTupleDesc <span class="token operator">=</span> <span class="token class-name">TupleDesc</span><span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>child1<span class="token punctuation">.</span><span class="token function">getTupleDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> child2<span class="token punctuation">.</span><span class="token function">getTupleDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong><code>fetchNext</code>方法：</strong></p>
<p>注意：</p>
<p>外层循环不能使用<code>while (child1.hasNext())</code>，因为不是每次调用<code>fetchNext</code>的时候<code>child1</code>都需要取<code>next</code>。比如<code>child1</code>是[[1,2],[3,4]]，<code>child2</code> 是[[1,2,3],[2,3,4]]，假设所有组合都符合要求，第一个结果应该是[1,2,1,2,3]，而第二个结果是[1,2,2,3,4]。当选用错误的做法时，第二个会变成[3,4,1,2,3]。</p>
<p>因此，我们需要用成员变量<code>t1</code>储存当前值，当<code>t2</code>遍历一轮后，取下一个<code>t1</code>，并重置<code>t2</code>。</p>
<p>当单元测试出现<code>expected tuple not found: 3 4 2 3 4 4</code>提示时可以考虑是否存在这个问题。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * Returns the next tuple generated by the join, or null if there are no
 * more tuples. Logically, this is the next tuple in r1 cross r2 that
 * satisfies the join predicate. There are many possible implementations;
 * the simplest is a nested loops join.
 * &lt;p>
 * Note that the tuples returned from this particular implementation of Join
 * are simply the concatenation of joining tuples from the left and right
 * relation. Therefore, if an equality predicate is used there will be two
 * copies of the join attribute in the results. (Removing such duplicate
 * columns can be done with an additional projection operator if needed.)
 * &lt;p>
 * For example, if one tuple is &#123;1,2,3&#125; and the other tuple is &#123;1,5,6&#125;,
 * joined on equality of the first column, then this returns &#123;1,2,3,1,5,6&#125;.
 *
 * @return The next matching tuple.
 * @see JoinPredicate#filter
 */</span>
<span class="token keyword">protected</span> <span class="token class-name">Tuple</span> <span class="token function">fetchNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransactionAbortedException</span><span class="token punctuation">,</span> <span class="token class-name">DbException</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// some code goes here</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>child1<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> t1 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>child1<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> t1 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            t1 <span class="token operator">=</span> child1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">int</span> numT1 <span class="token operator">=</span> t1<span class="token punctuation">.</span><span class="token function">getTupleDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">numFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>child2<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Tuple</span> t2 <span class="token operator">=</span> child2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> numT2 <span class="token operator">=</span> t2<span class="token punctuation">.</span><span class="token function">getTupleDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">numFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>joinPredicate<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span> t2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">Tuple</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tuple</span><span class="token punctuation">(</span>newTupleDesc<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numT1<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    t<span class="token punctuation">.</span><span class="token function">setField</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> t1<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numT2<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    t<span class="token punctuation">.</span><span class="token function">setField</span><span class="token punctuation">(</span>i <span class="token operator">+</span> numT1<span class="token punctuation">,</span> t2<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">return</span> t<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">// child2 到尽头了，重新开始</span>
        child2<span class="token punctuation">.</span><span class="token function">rewind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        t1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>课程作业</category>
        <category>MIT 6.830</category>
      </categories>
      <tags>
        <tag>Database Systems</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>MIT 6.830 Lab 1: SimpleDB</title>
    <url>/posts/3c1ea5b1/</url>
    <content><![CDATA[<p>其他 MIT 6.830 的实验记录请查看：<a href="http://loststar.tech/categories/%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A/MIT-6-830/">Lab | MIT 6.830 | Loststar’s blog</a></p>
<p>课程官网：<a href="http://dsg.csail.mit.edu/6.830/">6.830/6.814: Database Systems (mit.edu)</a></p>
<p>框架代码仓库：<a href="https://github.com/MIT-DB-Class/simple-db-hw-2021">MIT-DB-Class/simple-db-hw-2021 (github.com)</a></p>
<p>对应单元测试：</p>
<table>
<thead>
<tr>
<th>练习</th>
<th>单元测试</th>
</tr>
</thead>
<tbody><tr>
<td>Exercise 1</td>
<td>TupleTest / TupleDescTest</td>
</tr>
<tr>
<td>Exercise 2</td>
<td>CatalogTest</td>
</tr>
<tr>
<td>Exercise 3</td>
<td>无</td>
</tr>
<tr>
<td>Exercise 4</td>
<td>HeapPageIdTest / RecordIDTest / HeapPageReadTest</td>
</tr>
<tr>
<td>Exercise 5</td>
<td>HeapFileReadTest</td>
</tr>
<tr>
<td>Exercise 6 / Lab 1 综合</td>
<td>ScanTest (systest)</td>
</tr>
</tbody></table>
<h1 id="Exercise-1-Fields-and-Tuples"><a href="#Exercise-1-Fields-and-Tuples" class="headerlink" title="Exercise 1: Fields and Tuples"></a>Exercise 1: Fields and Tuples</h1><p><code>TupleDesc</code> 类似表头，包含了列的名称和类型。<code>Tuple</code> 则是每一行的数据。</p>
<p>实验涉及的文件：</p>
<ul>
<li>src/java/simpledb/storage/TupleDesc.java</li>
<li>src/java/simpledb/storage/Tuple.java</li>
</ul>
<p>实现比较简单，跟着注释完成就行。其中，<code>hashCode</code> 和 <code>iterator</code> 等方法主要参考了 <code>ArrayList</code> 的实现。</p>
<h2 id="TupleDesc"><a href="#TupleDesc" class="headerlink" title="TupleDesc"></a>TupleDesc</h2><p><strong>数据结构：</strong></p>
<p>实验中，定义了一个辅助类<code>TDItem</code>，可以存储字段类型和字段名。因此，<code>TupleDesc</code>只需要实现一个可以储存<code>TDItem</code>的数组即可。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">TDItem</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tdItems<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><strong>迭代器：</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * TDItem 的迭代器类，参考 ArrayList
 */</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">TDItr</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TDItem</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> cursor<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">TDItem</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tdItems<span class="token punctuation">;</span>

    <span class="token class-name">TDItr</span><span class="token punctuation">(</span><span class="token class-name">TDItem</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tdItems<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>tdItems <span class="token operator">=</span> tdItems<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> cursor <span class="token operator">&lt;</span> tdItems<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">TDItem</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> cursor<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> tdItems<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        cursor <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> tdItems<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/**
 * @return An iterator which iterates over all the field TDItems
 * that are included in this TupleDesc
 */</span>
<span class="token keyword">public</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TDItem</span><span class="token punctuation">></span></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// some code goes here</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TDItr</span><span class="token punctuation">(</span>tdItems<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>相等判定：</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// some code goes here</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">TupleDesc</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">TupleDesc</span> <span class="token class-name">OtherTD</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TupleDesc</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">numFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">OtherTD</span><span class="token punctuation">.</span><span class="token function">numFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">numFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getFieldType</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">OtherTD</span><span class="token punctuation">.</span><span class="token function">getFieldType</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>hashCode：</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// If you want to use TupleDesc as keys for HashMap, implement this so</span>
    <span class="token comment">// that equal objects have equals hashCode() results</span>
    <span class="token comment">// 参考 ArrayList</span>
    <span class="token keyword">int</span> hashCode <span class="token operator">=</span> tdItems<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tdItems<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">TDItem</span> e <span class="token operator">=</span> tdItems<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        hashCode <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> hashCode <span class="token operator">+</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> e<span class="token punctuation">.</span>fieldType<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> hashCode<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="Tuple"><a href="#Tuple" class="headerlink" title="Tuple"></a>Tuple</h2><p><strong>数据结构：</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">TupleDesc</span> tupleDesc<span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token class-name">RecordId</span> recordId<span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><strong>迭代器：</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">
<span class="token comment">/**
 * @return An iterator which iterates over all the fields of this tuple
 */</span>
<span class="token keyword">public</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Field</span><span class="token punctuation">></span></span> <span class="token function">fields</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// some code goes here</span>
    <span class="token comment">// 尝试匿名函数</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Field</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">private</span> <span class="token keyword">int</span> cursor <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> cursor <span class="token operator">&lt;</span> fields<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">Field</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">int</span> i <span class="token operator">=</span> cursor<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            cursor <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> fields<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h1 id="Exercise-2-Catalog"><a href="#Exercise-2-Catalog" class="headerlink" title="Exercise 2: Catalog"></a>Exercise 2: Catalog</h1><p><code>Catalog</code>是数据库的目录，包含了各个表的信息。实验要求实现添加新表、获取表信息等功能。</p>
<p>实验涉及文件：</p>
<ul>
<li>src/java/simpledb/common/Catalog.java</li>
</ul>
<h2 id="Catalog"><a href="#Catalog" class="headerlink" title="Catalog"></a>Catalog</h2><p><strong>数据结构：</strong></p>
<p>由于每张表都有<code>file</code>、<code>name</code>、<code>pkeyField</code>属性，于是创建<code>Table</code>类便于管理。实验中要求可以通过<code>id</code>来获取表信息，于是建立<code>idTableMap</code>。同时，还有根据<code>name</code>获取<code>id</code>的需求，于是建立<code>nameIdMap</code>。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Table</span><span class="token punctuation">></span></span> idTableMap<span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> nameIdMap<span class="token punctuation">;</span>

<span class="token comment">/**
 * 辅助类，用于存储表信息
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Table</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DbFile</span> file<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> pkeyField<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Table</span><span class="token punctuation">(</span><span class="token class-name">DbFile</span> file<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> pkeyField<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>file <span class="token operator">=</span> file<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>pkeyField <span class="token operator">=</span> pkeyField<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">DbFile</span> <span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> file<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPkeyField</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> pkeyField<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token string">"Table&#123;"</span> <span class="token operator">+</span>
                <span class="token string">"file="</span> <span class="token operator">+</span> file <span class="token operator">+</span>
                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>
                <span class="token string">", pkeyField='"</span> <span class="token operator">+</span> pkeyField <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>
                <span class="token string">'&#125;'</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>由表名获取<code>id</code>：</strong></p>
<p>注意<code>name</code>要判空，否则过不了测试用例。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getTableId</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchElementException</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// some code goes here</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>nameIdMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"not found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> nameIdMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>由<code>id</code>获取<code>TupleDesc</code>：</strong></p>
<p>其他 get 方法大同小异</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">TupleDesc</span> <span class="token function">getTupleDesc</span><span class="token punctuation">(</span><span class="token keyword">int</span> tableid<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchElementException</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// some code goes here</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>idTableMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>tableid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span>tableid <span class="token operator">+</span> <span class="token string">"not found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> idTableMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>tableid<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTupleDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>删除所有：</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// some code goes here</span>
    idTableMap<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    nameIdMap<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="Exercise-3-BufferPool"><a href="#Exercise-3-BufferPool" class="headerlink" title="Exercise 3: BufferPool"></a>Exercise 3: BufferPool</h1><p><code>BufferPool</code>用于缓存读取过的页。在池未满时，将读取的页入池。池满后，每读取一次新页需要丢弃一次旧页。本次实验不需要实现置换策略，池满时抛出<code>DbException</code>即可。</p>
<p>实验涉及文件：</p>
<ul>
<li>src/java/simpledb/storage/BufferPool.java</li>
</ul>
<h2 id="BufferPool"><a href="#BufferPool" class="headerlink" title="BufferPool"></a>BufferPool</h2><p><strong>数据结构：</strong></p>
<p>需要根据<code>PageId</code>找页，以及判断池是否已满。于是创建<code>&lt;PageId.hashCode, Page&gt;</code>的<code>Map</code>用于缓存最近出现过的页。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Page</span><span class="token punctuation">></span></span> idPageMap<span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">int</span> numPages<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><strong>获取页：</strong></p>
<p>不需要实现置换策略，抛异常即可。</p>
<p>注意：<code>Catalog</code>是单例对象，调页时要用<code>Database.getCatalog()</code>获取。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Page</span> <span class="token function">getPage</span><span class="token punctuation">(</span><span class="token class-name">TransactionId</span> tid<span class="token punctuation">,</span> <span class="token class-name">PageId</span> pid<span class="token punctuation">,</span> <span class="token class-name">Permissions</span> perm<span class="token punctuation">)</span>
        <span class="token keyword">throws</span> <span class="token class-name">TransactionAbortedException</span><span class="token punctuation">,</span> <span class="token class-name">DbException</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// some code goes here</span>
    <span class="token keyword">int</span> id <span class="token operator">=</span> pid<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>idPageMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>idPageMap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> numPages<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">DbException</span><span class="token punctuation">(</span><span class="token string">"Buffer Pool Full"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">DbFile</span> databaseFile <span class="token operator">=</span> <span class="token class-name">Database</span><span class="token punctuation">.</span><span class="token function">getCatalog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDatabaseFile</span><span class="token punctuation">(</span>pid<span class="token punctuation">.</span><span class="token function">getTableId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            idPageMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> databaseFile<span class="token punctuation">.</span><span class="token function">readPage</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> idPageMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="Exercise-4-HeapPage"><a href="#Exercise-4-HeapPage" class="headerlink" title="Exercise 4: HeapPage"></a>Exercise 4: HeapPage</h1><p><code>HeapPage</code>是页的一个实现，里面划分成许多<code>slot</code>，每个<code>slot</code>存放了一个的<code>Tuple</code>，还有一个<code>header</code>标记<code>slot</code>是否被使用。<code>HeapPageId</code>用于标识每个页面。<code>RecordId</code>用于标识每个<code>Tuple</code>。</p>
<p>实验涉及文件：</p>
<ul>
<li>src/java/simpledb/storage/HeapPageId.java</li>
<li>src/java/simpledb/storage/RecordId.java</li>
<li>src/java/simpledb/storage/HeapPage.java</li>
</ul>
<h2 id="HeapPageId"><a href="#HeapPageId" class="headerlink" title="HeapPageId"></a>HeapPageId</h2><p>变量根据构造函数设计即可。都是些get方法。</p>
<p><strong>hashCode：</strong></p>
<p>因为注释提到可能用作HashMap的key，为了更好的分布，通过字符串的哈希来实现。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// some code goes here</span>
    <span class="token class-name">String</span> s <span class="token operator">=</span> tableId <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> pgNo<span class="token punctuation">;</span>
    <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="RecordId"><a href="#RecordId" class="headerlink" title="RecordId"></a>RecordId</h2><p>变量同样是根据构造函数设计即可。</p>
<p><strong>判定相等：</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// some code goes here</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">RecordId</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">RecordId</span> other <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">RecordId</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>pid<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>pid<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tupleno <span class="token operator">==</span> other<span class="token punctuation">.</span>tupleno<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="HeapPage"><a href="#HeapPage" class="headerlink" title="HeapPage"></a>HeapPage</h2><p><strong>元组数目计算：</strong><br>$$<br>tuplesPerPage=\lfloor \frac{pageSize \times 8}{tupleSize \times 8+1} \rfloor<br>$$</p>
<p>注意浮点运算！用8代替8.0的时候会有精度问题，过不了最后的<code>ScanTest</code>测试。喜欢乘1.0也可以。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * Retrieve the number of tuples on this page.
 *
 * @return the number of tuples on this page
 */</span>
<span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">getNumTuples</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// some code goes here</span>
    <span class="token keyword">int</span> pageSize <span class="token operator">=</span> <span class="token class-name">BufferPool</span><span class="token punctuation">.</span><span class="token function">getPageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> tupleSize <span class="token operator">=</span> td<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pageSize <span class="token operator">*</span> <span class="token number">8.0</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>tupleSize <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>计算 header 大小：</strong><br>$$<br>headerSize=\lceil \frac{numSlots}{8} \rceil<br>$$</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;**
 * Computes the number of bytes in the header of a page in a HeapFile with each tuple occupying tupleSize bytes
 *
 * @return the number of bytes in the header of a page in a HeapFile with each tuple occupying tupleSize bytes
 *&#x2F;
private int getHeaderSize() &#123;
    &#x2F;&#x2F; some code goes here
    return (int) Math.ceil(numSlots &#x2F; 8.0);
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>判断 slot 是否被使用：</strong></p>
<p><code>header</code>是一个字节数组，每个字节有8位。因此在定位总的第i位时，需要找到它属于哪个字节，然后找到属于字节里的哪一位。<br>$$<br>\begin{cases}<br>byteIndex=i\div8 \\<br>bitIndex=i\mod8 \\<br>\end{cases}<br>$$<br>其中，对2的次幂求模，可以用位运算代替取模运算以节省时间。这个在<code>HashMap</code>的实现里也有所体现。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * Returns true if associated slot on this page is filled.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSlotUsed</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// some code goes here</span>
    <span class="token keyword">int</span> byteIndex <span class="token operator">=</span> i <span class="token operator">>></span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> bitIndex <span class="token operator">=</span> i <span class="token operator">&amp;</span> <span class="token number">7</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>header<span class="token punctuation">[</span>byteIndex<span class="token punctuation">]</span> <span class="token operator">>></span> bitIndex <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>迭代器：</strong></p>
<p><code>hasNext</code>判断是否存在下一个被使用的<code>slot</code>。</p>
<p>当调用<code>remove</code>方法时抛出<code>UnsupportedOperationException</code>。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * @return an iterator over all tuples on this page (calling remove on this iterator throws an UnsupportedOperationException)
 * (note that this iterator shouldn't return tuples in empty slots!)
 */</span>
<span class="token keyword">public</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple</span><span class="token punctuation">></span></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// some code goes here</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> cursor <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>cursor <span class="token operator">&lt;</span> numSlots <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isSlotUsed</span><span class="token punctuation">(</span>cursor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                cursor<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">return</span> cursor <span class="token operator">&lt;</span> numSlots<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">Tuple</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">int</span> i <span class="token operator">=</span> cursor<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            cursor <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> tuples<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"remove"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="Exercise-5-HeapFile"><a href="#Exercise-5-HeapFile" class="headerlink" title="Exercise 5: HeapFile"></a>Exercise 5: HeapFile</h1><p>这一节有两大任务：文件的随机读取和迭代器的实现。随机读取需要自行计算偏移量。迭代器实现需要考虑调页。</p>
<p>实验涉及文件：</p>
<ul>
<li>src/java/simpledb/storage/HeapFile.java</li>
</ul>
<h2 id="HeapFile"><a href="#HeapFile" class="headerlink" title="HeapFile"></a>HeapFile</h2><p><strong>计算页面数目：</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * Returns the number of pages in this HeapFile.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// some code goes here</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> file<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token class-name">BufferPool</span><span class="token punctuation">.</span><span class="token function">getPageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p><strong>页面读取：</strong></p>
<p>这里，我们使用<code>RandomAccessFile</code>类来读取文件。构造函数中，第一个参数是文件，第二个参数是打开方式，这里使用的是只读。</p>
<p>首先判断页号是否合法，然后用<code>seek</code>方法定位到起始地址，用 <code>read</code> 方法读取一页。</p>
<p>读取完成后记得调用 <code>close</code> 方法。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// see DbFile.java for javadocs</span>
<span class="token keyword">public</span> <span class="token class-name">Page</span> <span class="token function">readPage</span><span class="token punctuation">(</span><span class="token class-name">PageId</span> pid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// some code goes here</span>
    <span class="token keyword">int</span> pageNumber <span class="token operator">=</span> pid<span class="token punctuation">.</span><span class="token function">getPageNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> tableId <span class="token operator">=</span> pid<span class="token punctuation">.</span><span class="token function">getTableId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> pageSize <span class="token operator">=</span> <span class="token class-name">BufferPool</span><span class="token punctuation">.</span><span class="token function">getPageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">RandomAccessFile</span> randomAccessFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pageData <span class="token operator">=</span> <span class="token class-name">HeapPage</span><span class="token punctuation">.</span><span class="token function">createEmptyPageData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pageNumber <span class="token operator">>=</span> <span class="token function">numPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            randomAccessFile<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"page not exist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            randomAccessFile<span class="token punctuation">.</span><span class="token function">seek</span><span class="token punctuation">(</span>pageNumber <span class="token operator">*</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
            randomAccessFile<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>pageData<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HeapPage</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HeapPageId</span><span class="token punctuation">(</span>tableId<span class="token punctuation">,</span> pageNumber<span class="token punctuation">)</span><span class="token punctuation">,</span> pageData<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
            randomAccessFile<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>迭代器：</strong></p>
<p><code>open</code> 相当于初始化方法。<code>hasNext</code> 方法要判断本页是否读完，如果读完了要尝试调页而不是返回 false。<code>rewind</code> 的作用是重置迭代器，先<code>close</code>再<code>open</code>就行。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// see DbFile.java for javadocs</span>
<span class="token keyword">public</span> <span class="token class-name">DbFileIterator</span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token class-name">TransactionId</span> tid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// some code goes here</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DbFileIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">BufferPool</span> bufferPool <span class="token operator">=</span> <span class="token class-name">Database</span><span class="token punctuation">.</span><span class="token function">getBufferPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple</span><span class="token punctuation">></span></span> pageTupleItr<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">int</span> curPage<span class="token punctuation">;</span>

        <span class="token comment">// 调页工具方法</span>
        <span class="token keyword">private</span> <span class="token class-name">HeapPage</span> <span class="token function">getPage</span><span class="token punctuation">(</span><span class="token keyword">int</span> pageNumber<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">DbException</span><span class="token punctuation">,</span> <span class="token class-name">TransactionAbortedException</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">HeapPageId</span> pageId <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeapPageId</span><span class="token punctuation">(</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pageNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 这个方法不用特别抛异常，DbException 和 TransactionAbortedException都是 getPage 抛的</span>
            <span class="token class-name">HeapPage</span> page <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HeapPage</span><span class="token punctuation">)</span> bufferPool<span class="token punctuation">.</span><span class="token function">getPage</span><span class="token punctuation">(</span>tid<span class="token punctuation">,</span> pageId<span class="token punctuation">,</span> <span class="token class-name">Permissions</span><span class="token punctuation">.</span>READ_ONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> page<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">DbException</span><span class="token punctuation">,</span> <span class="token class-name">TransactionAbortedException</span> <span class="token punctuation">&#123;</span>
            curPage <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            pageTupleItr <span class="token operator">=</span> <span class="token function">getPage</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">DbException</span><span class="token punctuation">,</span> <span class="token class-name">TransactionAbortedException</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>pageTupleItr <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>pageTupleItr<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token comment">// 本页没读完</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                <span class="token comment">// 本页读完了，试图调下一非空页，直到最后一页</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span>curPage <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token function">numPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    curPage <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                    <span class="token class-name">HeapPage</span> page <span class="token operator">=</span> <span class="token function">getPage</span><span class="token punctuation">(</span>curPage<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    pageTupleItr <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>pageTupleItr<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">Tuple</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">DbException</span><span class="token punctuation">,</span> <span class="token class-name">TransactionAbortedException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchElementException</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>pageTupleItr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>pageTupleItr<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">return</span> pageTupleItr<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rewind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">DbException</span><span class="token punctuation">,</span> <span class="token class-name">TransactionAbortedException</span> <span class="token punctuation">&#123;</span>
            <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            pageTupleItr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="Exercise-6-Operators"><a href="#Exercise-6-Operators" class="headerlink" title="Exercise 6: Operators"></a>Exercise 6: Operators</h1><p>在<code>SimpleDB</code>中，操作符是基于迭代器实现的。</p>
<p>实验涉及文件：</p>
<ul>
<li>src/java/simpledb/execution/SeqScan.java</li>
</ul>
<h2 id="SeqScan"><a href="#SeqScan" class="headerlink" title="SeqScan"></a>SeqScan</h2><p><strong>变量定义：</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">TransactionId</span> tid<span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">int</span> tableid<span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> tableAlias<span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token class-name">DbFileIterator</span> dbFileIterator<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>获取<code>TupleDesc</code>：</strong></p>
<p>注意根据要求封装</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * Returns the TupleDesc with field names from the underlying HeapFile,
 * prefixed with the tableAlias string from the constructor. This prefix
 * becomes useful when joining tables containing a field(s) with the same
 * name.  The alias and name should be separated with a "." character
 * (e.g., "alias.fieldName").
 *
 * @return the TupleDesc with field names from the underlying HeapFile,
 * prefixed with the tableAlias string from the constructor.
 */</span>
<span class="token keyword">public</span> <span class="token class-name">TupleDesc</span> <span class="token function">getTupleDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// some code goes here</span>
    <span class="token class-name">TupleDesc</span> tupleDesc <span class="token operator">=</span> <span class="token class-name">Database</span><span class="token punctuation">.</span><span class="token function">getCatalog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTupleDesc</span><span class="token punctuation">(</span>tableid<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> numFields <span class="token operator">=</span> tupleDesc<span class="token punctuation">.</span><span class="token function">numFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Type</span><span class="token punctuation">[</span><span class="token punctuation">]</span> types <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Type</span><span class="token punctuation">[</span>numFields<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fieldNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>numFields<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numFields<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        types<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tupleDesc<span class="token punctuation">.</span><span class="token function">getFieldType</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        fieldNames<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tableAlias <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> tupleDesc<span class="token punctuation">.</span><span class="token function">getFieldName</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TupleDesc</span><span class="token punctuation">(</span>types<span class="token punctuation">,</span> fieldNames<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>其余方法：</strong></p>
<p>调用<code>HeapFile</code>的方法即可。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">DbException</span><span class="token punctuation">,</span> <span class="token class-name">TransactionAbortedException</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// some code goes here</span>
    <span class="token class-name">Catalog</span> catalog <span class="token operator">=</span> <span class="token class-name">Database</span><span class="token punctuation">.</span><span class="token function">getCatalog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">DbFile</span> databaseFile <span class="token operator">=</span> catalog<span class="token punctuation">.</span><span class="token function">getDatabaseFile</span><span class="token punctuation">(</span>tableid<span class="token punctuation">)</span><span class="token punctuation">;</span>
    dbFileIterator <span class="token operator">=</span> databaseFile<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span>tid<span class="token punctuation">)</span><span class="token punctuation">;</span>
    dbFileIterator<span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransactionAbortedException</span><span class="token punctuation">,</span> <span class="token class-name">DbException</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// some code goes here</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>dbFileIterator <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> dbFileIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token class-name">Tuple</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">,</span>
        <span class="token class-name">TransactionAbortedException</span><span class="token punctuation">,</span> <span class="token class-name">DbException</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// some code goes here</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>dbFileIterator <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>dbFileIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> dbFileIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// some code goes here</span>
    dbFileIterator <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rewind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">DbException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">,</span>
        <span class="token class-name">TransactionAbortedException</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// some code goes here</span>
    <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>课程作业</category>
        <category>MIT 6.830</category>
      </categories>
      <tags>
        <tag>Database Systems</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Mark Text 初体验</title>
    <url>/posts/5f3c13b2/</url>
    <content><![CDATA[<p>一觉醒来，发现Typora要收费了。虽然依然能用旧版，但是感觉一直用旧版也不是个办法。再加上个人感觉Typora目前没有特别多值得付费的功能，就打算先找个代替品，继续观望。以后要是有很coooooooooool的功能再考虑付费支持。</p>
<h1 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h1><p>官网：<a href="https://marktext.app/">https://marktext.app/</a></p>
<p>Github：</p>
<div style="text-align: center">
  <div class="github-card" data-user="marktext" data-repo="marktext" data-height="200" data-width="400" data-theme="default" data-target data-client-id data-client-secret></div>
</div>
<script src="/github-card-lib/githubcard.js"></script>


<p>这次尝试的版本是<code>v0.16.3</code></p>
<h1 id="体验到的功能"><a href="#体验到的功能" class="headerlink" title="体验到的功能"></a>体验到的功能</h1><h2 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h2><p>看到标签页直接泪目。这就是梦中的编辑器吗？</p>
<p><img src="/posts/5f3c13b2/1.jpg" alt="标签页"></p>
<p>印象里这个功能是默认打开的，如果没有，勾选<code>View-&gt;Show Tab Bar</code>就行了。</p>
<p>在编辑界面，使用<code>Ctrl+TAB</code>可以切换标签。</p>
<h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>目前有6个主题，其中3个是亮色三个是暗色。</p>
<p>我使用的是<code>Material Dark</code></p>
<p><img src="/posts/5f3c13b2/2.jpg" alt="我用的主题" title="我用的主题"></p>
<h2 id="表情包"><a href="#表情包" class="headerlink" title="表情包"></a>表情包</h2><p>使用<code>Ctrl+/</code>可以呼出表情包面板，可以根据关键词搜索表情包。</p>
<p>搜索框还有随机功能，可以搜索随机关键词。然而这个词库可能被调教坏了：</p>
<p><img src="/posts/5f3c13b2/3.jpg" alt="表情包" title="表情包"></p>
<h1 id="比较难顶的地方"><a href="#比较难顶的地方" class="headerlink" title="比较难顶的地方"></a>比较难顶的地方</h1><p><strong>点击大纲不会跳转！！！！！！</strong></p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>至此，我觉得Mark Text基本能满足我的使用场景。当然，还有很多功能和设置我还没体验过。我已经将默认的markdown编辑器改为Mark Text，往后在写东西的过程中再慢慢体验。</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>工具分享</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>marktext</tag>
      </tags>
  </entry>
  <entry>
    <title>Next主题下HyperComments的优化</title>
    <url>/posts/da438ac2/</url>
    <content><![CDATA[<p>近日，把博客从typecho换到hexo，没有了typecho的原生评论，便开始寻找第三方评论。我所用的NexT主题比较良心，提供了好几种评论选择。然而，其中有的被墙了（disqus等），有的倒闭了（多说、网易云跟帖等），只剩下LiveRe（棒子国）和HyperComments（毛子国）。然而听说LiveRe口碑不怎么样，所以积极投身HyperComments。</p>
<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>1.注册<a href="https://www.hypercomments.com/">HyperComments</a></p>
<p>2.获取<code>hypercomments_id</code>并填入<strong>主题目录下</strong>的<code>_config.yml</code></p>
<p>3.你已经可以开始用HyperComments了</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在使用过程中，会发现一些问题。比如，评论框文字是繁体，加载比较慢等。</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><h3 id="js本地化"><a href="#js本地化" class="headerlink" title="js本地化"></a>js本地化</h3><p>1.下载<code>http://w.hypercomments.com/widget/hc/你的hypercomments_id/zh/widget.js</code>[下文称js1]</p>
<p>2.找到类似<code>h.src=(&quot;https:&quot;==d.location.protocol?&quot;https&quot;:&quot;http&quot;)+&quot;://static.hypercomments.com/widget/hcembed/*****/zh/**************/**************/&quot;+f;</code>的语句（可以搜索src）</p>
<p>3.下载<code>static.hypercomments.com/widget/hcembed/*****/zh/**************/**************/widget.js</code>[下文称js2]</p>
<h3 id="繁体简化"><a href="#繁体简化" class="headerlink" title="繁体简化"></a>繁体简化</h3><p>1.打开js2</p>
<p>2.找到有繁体字的地方，修改成简体字</p>
<p>3.上传新js2到你的存放空间，并获取新js2的外链地址</p>
<p>4.把js1里<code>src=</code>后面，下一个分号前面换成上一步获得的地址</p>
<p>5.上传新js1到你的空间，获取外链地址</p>
<p>6.打开主题目录下的<code>\layout\_third-party\comments\hypercomments.swig</code>,把<code>hcc.src =</code>到<code>&quot;;</code>之间内容换成上一步获得的js1的地址</p>
<p>7.重新部署hexo</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>博客相关</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>HyperComments</tag>
        <tag>繁体简化</tag>
      </tags>
  </entry>
  <entry>
    <title>PDO连接缓慢的一个解决方法</title>
    <url>/posts/2e64231/</url>
    <content><![CDATA[<blockquote>
<p>太长不看版：把 localhost 换成 127.0.0.1 </p>
</blockquote>
<h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1 问题"></a>1 问题</h2><p>在写一个小玩具的时候，一个逻辑十分简单的接口耗时超过2s，十分不正常。</p>
<p><img src="/posts/2e64231/%E6%97%B6%E9%97%B4.jpg" alt="加载时间大大超出预期"></p>
<h2 id="2-排查"><a href="#2-排查" class="headerlink" title="2 排查"></a>2 排查</h2><h3 id="2-1-接口检查"><a href="#2-1-接口检查" class="headerlink" title="2.1 接口检查"></a>2.1 接口检查</h3><p>接口逻辑十分简单，只包含了两个部分：数据查询、json_encode。<code>json_encode  </code>作为内置函数，加上以往经验，不太可能是问题的关键。通过比较部分执行时间，数据查询部分执行时间约为另一部分的 <strong>10E5</strong> 倍。再用 navicat 手工构造执行了一下相同语句，耗时仅有 0.017s，更加肯定了连接上的问题。</p>
<p><img src="/posts/2e64231/navicat.jpg" alt="navicat"></p>
<h3 id="2-2-查看user表"><a href="#2-2-查看user表" class="headerlink" title="2.2 查看user表"></a>2.2 查看user表</h3><p>既然是连接上的问题，那就去看看 <code>mysql</code> 库里有没有好康的。无意之中点到了 <code>user</code> 表，突然有了一些想法。</p>
<p><img src="/posts/2e64231/old.jpg" alt="user表"></p>
<p>莫非，是 ipv6 的锅？</p>
<p>随手 ping 了一下 <code>localhost</code> </p>
<p><img src="/posts/2e64231/ping.jpg" alt="ping"></p>
<p>试着用 telnet 连接了一下 3306 端口，<code>localhost</code> 和 <code>127.0.0.1</code> 成功，<code>::1</code> 失败。</p>
<h2 id="3-解决"><a href="#3-解决" class="headerlink" title="3 解决"></a>3 解决</h2><p>于是乎，将 <code>mysql:host=localhost</code> 改为 <code>mysql:host=127.0.0.1</code> ，刷新</p>
<p><img src="/posts/2e64231/new.png" alt="修改后"></p>
<p>好起来了</p>
<p>所以，估计是 localhost 默认解析为 ipv6 地址，导致无法连接和超时。体现在应用上就是加载时间长了。</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>技术</category>
        <category>php</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>问题排查</tag>
        <tag>PDO</tag>
        <tag>方法记录</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo只在特定页面开启mathjax</title>
    <url>/posts/a7d694aa/</url>
    <content><![CDATA[<p>在 <code>Hexo-NexT</code> 主题中，可以选择是否在所有页面加载 mathjax。但是在切换为 <code>indigo</code> 主题后，只能选择全局加载。对 <code>themes/indigo/layout/_partial/plugins/mathjax.ejs</code>进行少许修改即可实现。</p>
<ol>
<li>在第2行加入 <code>&lt;% if (page.mathjax)&#123; %&gt;</code></li>
<li>在第24行加入<code>&lt;% &#125; %&gt;</code></li>
<li>在需要使用mathjax的文章头部加入 <code>mathjax: true</code> 即可</li>
</ol>
<p>修改后 <code>mathjax.ejs</code> 全部内容如下</p>
<pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>mathjax<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>
<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span>page<span class="token punctuation">.</span>mathjax<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>
<span class="token comment">&lt;!-- mathjax config similar to math.stackexchange --></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/x-mathjax-config<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
MathJax<span class="token punctuation">.</span>Hub<span class="token punctuation">.</span><span class="token function">Config</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    tex2jax<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        inlineMath<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">[</span><span class="token string">'$'</span><span class="token punctuation">,</span><span class="token string">'$'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"\\("</span><span class="token punctuation">,</span><span class="token string">"\\)"</span><span class="token punctuation">]</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>
        processEscapes<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        skipTags<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'script'</span><span class="token punctuation">,</span> <span class="token string">'noscript'</span><span class="token punctuation">,</span> <span class="token string">'style'</span><span class="token punctuation">,</span> <span class="token string">'textarea'</span><span class="token punctuation">,</span> <span class="token string">'pre'</span><span class="token punctuation">,</span> <span class="token string">'code'</span><span class="token punctuation">]</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

MathJax<span class="token punctuation">.</span>Hub<span class="token punctuation">.</span><span class="token function">Queue</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> all <span class="token operator">=</span> MathJax<span class="token punctuation">.</span>Hub<span class="token punctuation">.</span><span class="token function">getAllJax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> all<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        all<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">SourceElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span>className <span class="token operator">+=</span> <span class="token string">' has-jax'</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">async</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//cdn.bootcss.com/mathjax/2.7.0/MathJax.js?config=TeX-MML-AM_CHTML<span class="token punctuation">"</span></span> <span class="token attr-name">async</span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span>
<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>博客相关</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>方法记录</tag>
        <tag>mathjax</tag>
        <tag>indigo</tag>
      </tags>
  </entry>
  <entry>
    <title>PasteEx，将剪贴板粘贴为文件的工具</title>
    <url>/posts/259390eb/</url>
    <content><![CDATA[<p>在写作业的时候，经常需要保存一些截图。最开始的解决方法是截图后打开画图，然后保存。在使用了 PasteEx 之后，只需直接在想保存的地方右键即可保存。剪贴板内的文字同理也可以直接保存为txt文件，不需要打开其他程序。</p>
<div style="text-align: center">
  <div class="github-card" data-user="huiyadanli" data-repo="PasteEx" data-height="200" data-width="400" data-theme="default" data-target data-client-id data-client-secret></div>
</div>
<script src="/github-card-lib/githubcard.js"></script>


<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>工具分享</category>
      </categories>
      <tags>
        <tag>剪贴板</tag>
        <tag>一键保存</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo文章内折叠插件</title>
    <url>/posts/174f11e7/</url>
    <content><![CDATA[<p>通过使用该插件可以实现文章内容的折叠：</p>
<div style="text-align: center">
  <div class="github-card" data-user="fletchto99" data-repo="hexo-sliding-spoiler" data-height="200" data-width="400" data-theme="default" data-target data-client-id data-client-secret></div>
</div>
<script src="/github-card-lib/githubcard.js"></script>


<h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs">&#123;% spoiler "标题" %&#125;
内容
&#123;% endspoiler %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h1 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h1><div class="spoiler collapsed">
    <div class="spoiler-title">
        我是标题
    </div>
    <div class="spoiler-content">
        <p>我是内容</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//我是代码</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

    </div>
</div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>工具分享</category>
      </categories>
      <tags>
        <tag>插件</tag>
        <tag>折叠</tag>
      </tags>
  </entry>
  <entry>
    <title>一种可扩容布隆过滤器设计</title>
    <url>/posts/cd44be17/</url>
    <content><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="猜想"><a href="#猜想" class="headerlink" title="猜想"></a>猜想</h2><p><a href="https://loststar.tech/posts/de1ff129/">上一篇文章</a>，我们说到了怎么去实现简单的布隆过滤器，同时也提到了以下几个点：</p>
<ol>
<li>布隆过滤器由于哈希冲突可能会存在误判；</li>
<li>BitSet长度以及哈希函数的数目和冲突有关；</li>
<li>BitSet长度以及哈希函数的数目由预计放入的元素数目和预期误判率计算得出。</li>
</ol>
<p>从中，我们可以猜测：当实际放入过滤器中的元素多于预期时，布隆过滤器的效果会受到负面影响。</p>
<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>我们采用实际的误判率（误拒率，某一原本不在集合中的元素却被检测为在该集合中的概率）作为评价指标。预计放入的元素均为[0,n)的整数，每一组测试均使用[20000,23000)共3000个不在集合内的元素。</p>
<table>
<thead>
<tr>
<th>预计放入元素数目</th>
<th>预计误判率</th>
<th>实际放入元素数目</th>
<th>实际误判率</th>
</tr>
</thead>
<tbody><tr>
<td>5000</td>
<td>0.01</td>
<td>4000</td>
<td>0.0003</td>
</tr>
<tr>
<td>5000</td>
<td>0.01</td>
<td>6000</td>
<td>0.0083</td>
</tr>
<tr>
<td>5000</td>
<td>0.01</td>
<td>8000</td>
<td>0.0427</td>
</tr>
<tr>
<td>5000</td>
<td>0.01</td>
<td>10000</td>
<td>0.1393</td>
</tr>
<tr>
<td>5000</td>
<td>0.01</td>
<td>20000</td>
<td>0.7573</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>预计放入元素数目</th>
<th>预计误判率</th>
<th>实际放入元素数目</th>
<th>实际误判率</th>
</tr>
</thead>
<tbody><tr>
<td>5000</td>
<td>0.001</td>
<td>4000</td>
<td>0.0000</td>
</tr>
<tr>
<td>5000</td>
<td>0.001</td>
<td>6000</td>
<td>0.0007</td>
</tr>
<tr>
<td>5000</td>
<td>0.001</td>
<td>8000</td>
<td>0.0090</td>
</tr>
<tr>
<td>5000</td>
<td>0.001</td>
<td>10000</td>
<td>0.0357</td>
</tr>
<tr>
<td>5000</td>
<td>0.001</td>
<td>20000</td>
<td>0.5483</td>
</tr>
</tbody></table>
<p>可以看到，超量加入元素的确对过滤器效果有较大影响。</p>
<h1 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h1><p>在现实中，遇到这种超过预期的情况，最好的方法依然是重建过滤器。但是重建有一定的成本，不一定方便立刻重建。因此，可以设计扩容功能，短时间牺牲一些性能来保证准确率。在条件合适的时候再重建。</p>
<p>目前，对于扩容，一种比较不错的方法是并联多个过滤器，也就是使用多个BitSet。写入时，只在最新的过滤器写入；判断时，遍历各个过滤器，只要有一个判定存在则返回存在。</p>
<p>最后一个问题便是什么时候扩容。我认为，除了超过预计容量时需要扩容之外，应该设定一个扩容因子，当最新的布隆过滤器内1的比例超过该因子时，也要扩容。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_INITIAL_CAPACITY <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> DEFAULT_INITIAL_MISJUDGMENT_RATE <span class="token operator">=</span> <span class="token number">0.01f</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> DEFAULT_GROW_FACTOR <span class="token operator">=</span> <span class="token number">0.5f</span><span class="token punctuation">;</span>

<span class="token comment">// 布隆过滤器列表</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BloomFilter</span><span class="token punctuation">></span></span> bloomFilters<span class="token punctuation">;</span>
<span class="token comment">// 最新的布隆过滤器</span>
<span class="token class-name">BloomFilter</span> curBloomFilter<span class="token punctuation">;</span>
<span class="token comment">// 预计容量</span>
<span class="token keyword">int</span> capacity<span class="token punctuation">;</span>
<span class="token comment">// 预计误判率</span>
<span class="token keyword">double</span> misjudgmentRate<span class="token punctuation">;</span>
<span class="token comment">//当前容量</span>
<span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token comment">// 布隆过滤器数目</span>
<span class="token keyword">int</span> numBloomFilter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token comment">// 扩容因子(最新的布隆过滤器中1的比例)</span>
<span class="token keyword">double</span> growFactor <span class="token operator">=</span> DEFAULT_GROW_FACTOR<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 使用默认的元素个数(1000)、默认误判率(0.01)、默认扩容因子(0.5)构建一个布隆过滤器
 *
 * @author: loststar
 * @time: 2022/2/5 21:56
 */</span>
<span class="token keyword">public</span> <span class="token class-name">ScalableBloomFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">(</span>DEFAULT_INITIAL_CAPACITY<span class="token punctuation">,</span> DEFAULT_INITIAL_MISJUDGMENT_RATE<span class="token punctuation">,</span> DEFAULT_GROW_FACTOR<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/**
 * 使用指定的元素个数、默认误判率(0.01)、默认扩容因子(0.5)构建一个布隆过滤器
 *
 * @param capacity 元素个数
 * @author: loststar
 * @time: 2022/2/5 21:58
 */</span>
<span class="token keyword">public</span> <span class="token class-name">ScalableBloomFilter</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">(</span>capacity<span class="token punctuation">,</span> DEFAULT_INITIAL_MISJUDGMENT_RATE<span class="token punctuation">,</span> DEFAULT_GROW_FACTOR<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/**
 * 使用指定的元素个数、指定的误判率、默认扩容因子(0.5)构建一个布隆过滤器
 *
 * @param capacity        元素个数
 * @param misjudgmentRate 误判率
 * @author: loststar
 * @time: 2022/2/5 21:58
 */</span>
<span class="token keyword">public</span> <span class="token class-name">ScalableBloomFilter</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">,</span> <span class="token keyword">double</span> misjudgmentRate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">(</span>capacity<span class="token punctuation">,</span> misjudgmentRate<span class="token punctuation">,</span> DEFAULT_GROW_FACTOR<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/**
 * 使用指定的元素个数、指定的误判率、指定的扩容因子构建一个布隆过滤器
 *
 * @param capacity        元素个数
 * @param misjudgmentRate 误判率
 * @param growFactor      扩容因子
 */</span>
<span class="token keyword">public</span> <span class="token class-name">ScalableBloomFilter</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">,</span> <span class="token keyword">double</span> misjudgmentRate<span class="token punctuation">,</span> <span class="token keyword">double</span> growFactor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>misjudgmentRate <span class="token operator">=</span> misjudgmentRate<span class="token punctuation">;</span>
    bloomFilters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">grow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="添加（关键）"><a href="#添加（关键）" class="headerlink" title="添加（关键）"></a>添加（关键）</h2><p>在这个函数内，我们先判断当前容量是否已经超过多个布隆过滤器的总容量，以及最新的布隆过滤器内1的占比是否超过扩容因子。如果需要扩容，则调用<code>grow</code>方法进行扩容，如果不需要则正常在最新的过滤器添加。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 向布隆过滤器添加一个元素，同时判断是否需要扩容
 *
 * @param value 要添加的元素
 * @return: void
 * @author: loststar
 * @time: 2022/2/5 22:00
 */</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">T</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">/</span> numBloomFilter <span class="token operator">></span> capacity <span class="token operator">||</span> curBloomFilter<span class="token punctuation">.</span><span class="token function">calculateTrueBitProportion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> growFactor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">grow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    size<span class="token operator">++</span><span class="token punctuation">;</span>
    curBloomFilter<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 扩容函数
 *
 * @author: loststar
 * @time: 2022/2/5 22:01
 */</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    curBloomFilter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BloomFilter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>capacity<span class="token punctuation">,</span> misjudgmentRate<span class="token punctuation">)</span><span class="token punctuation">;</span>
    bloomFilters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>curBloomFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>
    numBloomFilter<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h2><p>判断每一个内是否存在</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 判断元素是否在布隆过滤器内
 *
 * @param value 被判断的元素
 * @return: boolean
 * @author: loststar
 * @time: 2022/2/5 22:00
 */</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">T</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">BloomFilter</span> bloomFilter <span class="token operator">:</span> bloomFilters<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>bloomFilter<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>测试前提同第一节，扩容因子均为0.5。</p>
<table>
<thead>
<tr>
<th>预计放入元素数目</th>
<th>预计误判率</th>
<th>实际放入元素数目</th>
<th>实际误判率</th>
<th>布隆过滤器数目</th>
</tr>
</thead>
<tbody><tr>
<td>5000</td>
<td>0.01</td>
<td>4000</td>
<td>0.0003</td>
<td>1</td>
</tr>
<tr>
<td>5000</td>
<td>0.01</td>
<td>6000</td>
<td>0.0007</td>
<td>2</td>
</tr>
<tr>
<td>5000</td>
<td>0.01</td>
<td>8000</td>
<td>0.0010</td>
<td>2</td>
</tr>
<tr>
<td>5000</td>
<td>0.01</td>
<td>10000</td>
<td>0.0037</td>
<td>3</td>
</tr>
<tr>
<td>5000</td>
<td>0.01</td>
<td>20000</td>
<td>0.0070</td>
<td>5</td>
</tr>
</tbody></table>
<p><img src="/posts/cd44be17/1.png"></p>
<table>
<thead>
<tr>
<th>预计放入元素数目</th>
<th>预计误判率</th>
<th>实际放入元素数目</th>
<th>实际误判率</th>
<th>布隆过滤器数目</th>
</tr>
</thead>
<tbody><tr>
<td>5000</td>
<td>0.001</td>
<td>4000</td>
<td>0.0000</td>
<td>1</td>
</tr>
<tr>
<td>5000</td>
<td>0.001</td>
<td>6000</td>
<td>0.0003</td>
<td>2</td>
</tr>
<tr>
<td>5000</td>
<td>0.001</td>
<td>8000</td>
<td>0.0003</td>
<td>2</td>
</tr>
<tr>
<td>5000</td>
<td>0.001</td>
<td>10000</td>
<td>0.0003</td>
<td>3</td>
</tr>
<tr>
<td>5000</td>
<td>0.001</td>
<td>20000</td>
<td>0.0007</td>
<td>5</td>
</tr>
</tbody></table>
<p><img src="/posts/cd44be17/2.png"></p>
<p>可以看到，准确率有较大幅度的提升。</p>
<p>对于时间消耗，本次并未测试。但是，根据设计，可以推测：对于添加方法，时间不变；对于判断方法，时间随着过滤器数目增多而增多。因此，本方法适合用作提高对错误估计的容忍程度，但不适合无限扩容。在合适的时候，仍需根据当前实际容量情况重新估计，并且重建过滤器。</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>布隆过滤器</tag>
        <tag>Bloom Filter</tag>
        <tag>扩容</tag>
      </tags>
  </entry>
  <entry>
    <title>从wordpress到typecho再到hexo</title>
    <url>/posts/c5f3d396/</url>
    <content><![CDATA[<p><img src="http://7xr0vd.dl1.z0.glb.clouddn.com/tit.jpg" alt="tit"><br>    序：2017已不足百天，也差不多是入博坑5年时间了。5年里，换了3个大平台（略 unbelievable）。回顾这 <del>一生</del> 5年，也有些感想。</p>
<h2 id="初入博坑：WordPress"><a href="#初入博坑：WordPress" class="headerlink" title="初入博坑：WordPress"></a>初入博坑：WordPress</h2><p>当年，觉得blog是个酷炫的玩意，于是跟风，按照随便百度来的教程，弄了一个。然而，由于缺乏动力以及没什么好记录，从建立到倒闭，只有一篇文——如何建立blog。</p>
<p>后来，进入新的学校，认识了 <a href="zzfly.net">烟花</a>，在烟花学长的指导下，入了vps，正正经经写文。再加上那时候在研究一些黑科技，出现了第一次产文高峰，也认识了很多志同道合的小伙伴。但是当时并没有关于网站的知识，php水平不知低到哪里去，对wordpress的实现原理也不甚了解，所以仅仅相当于娱乐，改改外观而已。</p>
<p>随着对php能力的进一步提升，开始模仿着写一些小插件，尝试同样功能的不同实现。不过，遇到了一个问题吧。当时使用的是搬瓦工的佛罗里达机房（貌似是的），访问速度堪忧，调试不方便。解决途径大概两 条。其一，学习前端知识，自行优化wp。其二，换一个更轻量级的平台。（不要问我为什么不在本地调试，因为不能<del>装逼</del>展示给人看）于是，我入了typecho的坑。</p>
<h2 id="小试牛刀：Typecho"><a href="#小试牛刀：Typecho" class="headerlink" title="小试牛刀：Typecho"></a>小试牛刀：Typecho</h2><p>一方面为了快，另一方面可以支持国产，typecho进入了视线。typecho的配置和wordpress一样简单。typecho示例页面打开时，这种简洁、清爽让我瞬间喜欢上这个平台。</p>
<p>在尝试typecho的时候，也是时间和点子较多的时候。文章第二次高产到来。除了写写小插件，小主题外，也尝试了二次开发（虽然没wp二次开发方便但也很舒服）。曾经有一次我甚至想为typecho修bug，只不过我自己的测试一直没过，时间原因，只好作罢。</p>
<p>typecho在我心里地位极高，除了没有主题商城外，其他都挺满意。或许是这样子码字太舒服，水文越来越多，有意思的内容越来越少。再加上忽然发现所用的主题最开始来自hexo平台，于是趁此机会，试试hexo。</p>
<h2 id="由恨生爱：hexo"><a href="#由恨生爱：hexo" class="headerlink" title="由恨生爱：hexo"></a>由恨生爱：hexo</h2><p>相比于wp和ty的安装方式，hexo堪称反人类。手撸markdown和命令行形式提交一开始也挺不适应。</p>
<p>要不是每月可以省一笔vps的钱，当时应该会放弃了吧。后来想起来，幸好当时没放弃。</p>
<p>自从用了hexo，不用当心文章什么时候丢失了找不回来了，也可以把静态html直接部署到某个主机上，同步很舒服。当然，省钱不能不提。gayhub真是好东西。</p>
<p>Anyway，这也是一种新的开始。平台不重要，希望内容质量能提升上来，不忘写博初心就好。</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>博客相关</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>wordpress</tag>
        <tag>hexo</tag>
        <tag>typecho</tag>
      </tags>
  </entry>
  <entry>
    <title>关于json_decode转换json对象为数组的一个坑</title>
    <url>/posts/d646a445/</url>
    <content><![CDATA[<p>今天在写一个小玩意的时候，使用了json_decode来处理一段返回结果。当我直接调用转换后数组下标的时候，提示如下错误。</p>
<p><code>PHP Fatal error:  Cannot use object of type stdClass as array in *:\*.php on line *</code></p>
<p>于是乎，前往<a href="http://php.net/manual/zh/function.json-decode.php">php.net关于json_decode的页面</a>查看文档。<br>发现json_decode完整用法如下。</p>
<p><code>mixed json_decode ( string $json [, bool $assoc = false [, int $depth = 512 [, int $options = 0 ]]] )</code></p>
<p>上面问题的原因就在于第二个参数<code>assoc</code>，文档内的解析是——<strong>当该参数为 TRUE 时，将返回 array 而非 object</strong>。</p>
<p>真相大白，刚刚我们操作并没有加上这个参数，而这个参数默认为<code>false</code>。所以操作的是一个对象而不是一个数组，自然会出错。</p>
<p>以php.net的示例代码结束本文。</p>
<pre class="line-numbers language-none"><code class="language-none">例子：
&lt;?php
$json &#x3D; &#39;&#123;&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3,&quot;d&quot;:4,&quot;e&quot;:5&#125;&#39;;
var_dump(json_decode($json));
var_dump(json_decode($json, true));
?&gt; 
输出：
object(stdClass)#1 (5) &#123;
    [&quot;a&quot;] &#x3D;&gt; int(1)
    [&quot;b&quot;] &#x3D;&gt; int(2)
    [&quot;c&quot;] &#x3D;&gt; int(3)
    [&quot;d&quot;] &#x3D;&gt; int(4)
    [&quot;e&quot;] &#x3D;&gt; int(5)
&#125;

array(5) &#123;
    [&quot;a&quot;] &#x3D;&gt; int(1)
    [&quot;b&quot;] &#x3D;&gt; int(2)
    [&quot;c&quot;] &#x3D;&gt; int(3)
    [&quot;d&quot;] &#x3D;&gt; int(4)
    [&quot;e&quot;] &#x3D;&gt; int(5)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>技术</category>
        <category>php</category>
      </categories>
      <tags>
        <tag>json</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>创新实践课作业--图像预处理作业</title>
    <url>/posts/fdb6251f/</url>
    <content><![CDATA[<blockquote>
<p>本文章由Jupyter Notebook导出</p>
</blockquote>
<h2 id="任务一"><a href="#任务一" class="headerlink" title="任务一"></a>任务一</h2><p>请用在不使用Opencv框架的情况下实现图片的镜像操作，最终显示原图片，垂直镜像图片和水平镜像图片。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token punctuation">,</span>ImageFilter
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np 
<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>


<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">%</span>matplotlib inline 
im <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"./lena.png"</span><span class="token punctuation">)</span> 
plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token string">"Text"</span><span class="token punctuation">)</span> <span class="token comment"># 图像窗口名称 </span>
plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>im<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>




<p><img src="/posts/fdb6251f/output_3_1.png" alt="png"></p>
<p>水平镜像</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">im2<span class="token operator">=</span>im<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>Image<span class="token punctuation">.</span>FLIP_LEFT_RIGHT<span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>im2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>






<p><img src="/posts/fdb6251f/output_5_1.png" alt="png"></p>
<p>垂直镜像</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">im3<span class="token operator">=</span>im<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>Image<span class="token punctuation">.</span>FLIP_TOP_BOTTOM<span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>im3<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>






<p><img src="/posts/fdb6251f/output_7_1.png" alt="png"></p>
<h2 id="任务二"><a href="#任务二" class="headerlink" title="任务二"></a>任务二</h2><p>请在不使用Opencv框架的情况下实现Gamma变换，并显示原图像，Gamma值为0.5和2时的图像。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">im_G<span class="token operator">=</span>im<span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token string">"L"</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>im_G<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>






<p><img src="/posts/fdb6251f/output_9_1.png" alt="png"></p>
<p>gamma函数</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">gamma_fun</span><span class="token punctuation">(</span>gm<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span><span class="token builtin">pow</span><span class="token punctuation">(</span>x<span class="token operator">/</span><span class="token number">255</span><span class="token punctuation">,</span>gm<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">255</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>gamma=0.5</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">im_gm05<span class="token operator">=</span>im_G<span class="token punctuation">.</span>point<span class="token punctuation">(</span>gamma_fun<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>im_gm05<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>






<p><img src="/posts/fdb6251f/output_13_1.png" alt="png"></p>
<p>gamma=2</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">im_gm2<span class="token operator">=</span>im_G<span class="token punctuation">.</span>point<span class="token punctuation">(</span>gamma_fun<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>im_gm2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>




<p><img src="/posts/fdb6251f/output_15_1.png" alt="png"></p>
<h2 id="任务三"><a href="#任务三" class="headerlink" title="任务三"></a>任务三</h2><p>请在不使用Opencv框架的情况下完成中值滤波操作，最终显示原图像，滤波窗口大小为3时的滤波效果和滤波窗口大小为5时的滤波效果。</p>
<p>原始图像</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>im<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>






<p><img src="/posts/fdb6251f/output_18_1.png" alt="png"></p>
<p>窗口为3</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">im_mid3<span class="token operator">=</span>im<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>ImageFilter<span class="token punctuation">.</span>MedianFilter<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>im_mid3<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>






<p><img src="/posts/fdb6251f/output_20_1.png" alt="png"></p>
<p>窗口为5</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">im_mid5<span class="token operator">=</span>im<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>ImageFilter<span class="token punctuation">.</span>MedianFilter<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>im_mid5<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>






<p><img src="/posts/fdb6251f/output_22_1.png" alt="png"></p>
<h2 id="任务四"><a href="#任务四" class="headerlink" title="任务四"></a>任务四</h2><p>请在不使用Opencv框架的情况下完成锐化操作，最终显示原图像，并使用1.2.19中的两个锐化算子进行锐化，然后显示图像效果，再使用PIL库内置锐化方法进行锐化操作，并显示结果。</p>
<p>原始图片</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>im<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>






<p><img src="/posts/fdb6251f/output_25_1.png" alt="png"></p>
<p>算子1</p>
<p>$$<br>\begin{bmatrix}<br>   -1 &amp; -1 &amp; -1 \<br>   -1 &amp; 9 &amp; -1 \<br>   -1 &amp; -1 &amp; -1<br>  \end{bmatrix}<br>$$</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">im_s1<span class="token operator">=</span>im<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>ImageFilter<span class="token punctuation">.</span>Kernel<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>im_s1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>




<p><img src="/posts/fdb6251f/output_27_1.png" alt="png"></p>
<p>算子2<br>$$<br>\begin{bmatrix}<br>   0 &amp; -1 &amp; 0 \<br>   -1 &amp; 8 &amp; -1 \<br>   0 &amp; 1 &amp; 0<br> \end{bmatrix}/4<br>$$</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">im_s2<span class="token operator">=</span>im<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>ImageFilter<span class="token punctuation">.</span>Kernel<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>im_s1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>






<p><img src="/posts/fdb6251f/output_29_1.png" alt="png"></p>
<p>内置方法</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">im_spil<span class="token operator">=</span>im<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>ImageFilter<span class="token punctuation">.</span>SHARPEN<span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>im_spil<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>






<p><img src="/posts/fdb6251f/output_31_1.png" alt="png"></p>
<h2 id="ipynb下载链接"><a href="#ipynb下载链接" class="headerlink" title="ipynb下载链接"></a>ipynb下载链接</h2><p><a href="/download/%E5%B0%8F%E5%AD%A6%E6%9C%9F%E5%8D%8E%E4%B8%BA%E5%88%9B%E6%96%B0%E5%AE%9E%E8%B7%B5%E8%AF%BE/%E5%9B%BE%E5%83%8F%E9%A2%84%E5%A4%84%E7%90%86%E4%BD%9C%E4%B8%9A.ipynb">图像预处理作业.ipynb</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>课程作业</category>
        <category>创新实践课</category>
      </categories>
      <tags>
        <tag>预处理</tag>
        <tag>PIL</tag>
      </tags>
  </entry>
  <entry>
    <title>对ThreadPoolTaskExecutor及其源码的观察</title>
    <url>/posts/3be9af02/</url>
    <content><![CDATA[<h1 id="实验概要"><a href="#实验概要" class="headerlink" title="实验概要"></a>实验概要</h1><p>在我的一个SpringBoot小项目中，用到了<code>ThreadPoolTaskExecutor</code>。对此，我有很多零碎的疑问，通过实践和查看源码逐一验证，记录在本文。实验中，Spring Framework版本为5.3.13。</p>
<h2 id="实验对象"><a href="#实验对象" class="headerlink" title="实验对象"></a>实验对象</h2><p><code>ThreadPoolTaskExecutor</code>是Spring提供的线程池，底层由<code>ThreadPoolExecutor</code>实现，参数与JAVA线程池类似，也提供了一些封装的方法，比如：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCorePoolSize</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>poolSizeMonitor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>threadPoolExecutor <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>threadPoolExecutor<span class="token punctuation">.</span><span class="token function">setCorePoolSize</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span>corePoolSize <span class="token operator">=</span> corePoolSize<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>还有</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setKeepAliveSeconds</span><span class="token punctuation">(</span><span class="token keyword">int</span> keepAliveSeconds<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>poolSizeMonitor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>threadPoolExecutor <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>threadPoolExecutor<span class="token punctuation">.</span><span class="token function">setKeepAliveTime</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>keepAliveSeconds<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span>keepAliveSeconds <span class="token operator">=</span> keepAliveSeconds<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="实验方法"><a href="#实验方法" class="headerlink" title="实验方法"></a>实验方法</h2><p>对于有直观现象的问题，使用<code>JMeter</code>创建并发请求，使用<code>jstack</code>查看线程情况；对于无直观现象的、原理性的问题，直接查看其代码了解。</p>
<h1 id="核心线程数可以为0吗"><a href="#核心线程数可以为0吗" class="headerlink" title="核心线程数可以为0吗?"></a>核心线程数可以为0吗?</h1><p>可以。</p>
<p>我们将核心线程数设置为0，最大线程数设置为20。</p>
<p>执行前</p>
<p><img src="/posts/3be9af02/1-1.jpg" alt="执行前"></p>
<p>执行时</p>
<p><img src="/posts/3be9af02/1-2.jpg" alt="执行时"></p>
<p>执行完成后再间隔空闲线程存活时间</p>
<p><img src="/posts/3be9af02/1-3.jpg" alt="执行后"></p>
<p>可以看到，在执行任务时创建的线程在存活时间结束后全部被销毁，证明全部都是应急线程。</p>
<h1 id="应急线程回收后剩下的是最初创建的几个线程吗？"><a href="#应急线程回收后剩下的是最初创建的几个线程吗？" class="headerlink" title="应急线程回收后剩下的是最初创建的几个线程吗？"></a>应急线程回收后剩下的是最初创建的几个线程吗？</h1><p>不一定。</p>
<p>我们将核心线程数设置为5，最大线程数设置为10。</p>
<p>首先，创建5个并发请求</p>
<p><img src="/posts/3be9af02/2-1.jpg"></p>
<p>执行完毕后，创建500个并发请求</p>
<p><img src="/posts/3be9af02/2-2.jpg"></p>
<p>等待<code>KeepAliveSeconds</code>秒后</p>
<p><img src="/posts/3be9af02/2-3.jpg"></p>
<p>可以看到，最后剩下的线程并不是最初创建的5个。</p>
<h1 id="默认的阻塞队列是什么？"><a href="#默认的阻塞队列是什么？" class="headerlink" title="默认的阻塞队列是什么？"></a>默认的阻塞队列是什么？</h1><p>视传入的任务队列的容量而定，当容量大于0为<code>LinkedBlockingQueue</code>，其他情况为<code>SynchronousQueue</code></p>
<p>在不设置容量时，容量默认为2147483647。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span> <span class="token function">createQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> queueCapacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">BlockingQueue</span><span class="token punctuation">)</span><span class="token punctuation">(</span>queueCapacity <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token punctuation">(</span>queueCapacity<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h1 id="默认的拒绝策略是什么"><a href="#默认的拒绝策略是什么" class="headerlink" title="默认的拒绝策略是什么"></a>默认的拒绝策略是什么</h1><p><code>ThreadPoolTaskExecutor</code>的默认拒绝策略和<code>ThreadPoolTaskExecutor</code>一致，为<code>AbortPolicy</code>，即丢弃线程任务并抛出异常。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">RejectedExecutionHandler</span> defaultHandler <span class="token operator">=</span>
    <span class="token keyword">new</span> <span class="token class-name">AbortPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>技术</category>
        <category>项目记录</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>线程池</tag>
        <tag>参数</tag>
        <tag>jmeter</tag>
      </tags>
  </entry>
  <entry>
    <title>布隆过滤器的学习与JAVA实现</title>
    <url>/posts/de1ff129/</url>
    <content><![CDATA[<blockquote>
<p>扩展：<a href="https://loststar.tech/posts/cd44be17/">一种可扩容布隆过滤器设计</a></p>
</blockquote>
<h1 id="什么是布隆过滤器"><a href="#什么是布隆过滤器" class="headerlink" title="什么是布隆过滤器"></a>什么是布隆过滤器</h1><p>这个问题网上一搜一大把，随便复制一段[维基百科](<a href="https://zh.wikipedia.org/wiki/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8">布隆过滤器 - 维基百科，自由的百科全书 (wikipedia.org)</a>)的解释：<strong>布隆过滤器</strong>（英语：Bloom Filter）是1970年由布隆提出的。它实际上是一个很长的二进制向量和一系列随机映射函数。布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率和删除困难。</p>
<p>在看了一段没什么意思的介绍后，来看看为什么它最大的特点：</p>
<p><strong>布隆过滤器说这个对象不存在则一定不存在</strong></p>
<p><strong>布隆过滤器说这个对象不存在则一定不存在</strong></p>
<p><strong>布隆过滤器说这个对象不存在则一定不存在</strong></p>
<h1 id="布隆过滤器为什么能行"><a href="#布隆过滤器为什么能行" class="headerlink" title="布隆过滤器为什么能行"></a>布隆过滤器为什么能行</h1><p>如图，我们将全集（“张三”、“李四”）输入布隆过滤器。布隆过滤器对每个元素计算多次哈希（图中为3次）。建立一个BitSet记录每个哈希函数的结果：将结果对应的位设置为真（1）。</p>
<p>在验证阶段，与输入阶段一样，对每个待验证的元素计算多次哈希：</p>
<ul>
<li>当任意一个哈希结果对应的位为假（0），则证明该元素没有出现过，不会误判。（图中“王五”）</li>
<li>当所有哈希结果对应的位均为真时，则认为是曾经被输入过。但是随着元素的增多，BitSet内真值密度增加，可能存在误判。（图中“赵六”）</li>
</ul>
<p><img src="/posts/de1ff129/1.jpg"></p>
<h1 id="布隆过滤器的参数选取"><a href="#布隆过滤器的参数选取" class="headerlink" title="布隆过滤器的参数选取"></a>布隆过滤器的参数选取</h1><p>在使用布隆过滤器之前，我们需要评估打算放入过滤器的元素数目<code>n</code>以及可以接受的误判率<code>p</code>。</p>
<p>需要的BitSet长度<code>m</code>和哈希函数个数<code>k</code>可以按照一下公式计算出来。<br>$$<br>m=\frac{-n*ln(p) }{ (ln(2)^2)}<br>$$</p>
<p>$$<br>k=ln2*\frac{m}{n}<br>$$</p>
<p>具体推导请看参考文献1和2。</p>
<p>如果想要在线计算的话，可以试试<a href="https://krisives.github.io/bloom-calculator/">Bloom Filter Calculator (krisives.github.io)</a></p>
<h1 id="简单的JAVA实现"><a href="#简单的JAVA实现" class="headerlink" title="简单的JAVA实现"></a>简单的JAVA实现</h1><p>代码里有注释，大概可以明白？有不明白的请在评论留言，我看到后会立刻补上解释</p>
<h2 id="主体"><a href="#主体" class="headerlink" title="主体"></a>主体</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>loststar<span class="token punctuation">.</span>bloomfilter</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>loststar<span class="token punctuation">.</span>bloomfilter<span class="token punctuation">.</span>hash</span><span class="token punctuation">.</span><span class="token class-name">HashFunction</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>loststar<span class="token punctuation">.</span>bloomfilter<span class="token punctuation">.</span>hash</span><span class="token punctuation">.</span><span class="token class-name">MultiplyPrimeHash</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util</span><span class="token punctuation">.</span><span class="token class-name">BitSet</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BloomFilter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_INITIAL_CAPACITY <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> DEFAULT_INITIAL_MISJUDGMENT_RATE <span class="token operator">=</span> <span class="token number">0.01f</span><span class="token punctuation">;</span>
    <span class="token class-name">BitSet</span> bitSet <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> bitSetLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">HashFunction</span> hashFunctions <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> numHashFunctions <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token comment">/**
     * 使用默认的元素个数(1000)和默认误判率(0.01)构建一个布隆过滤器
     *
     * @author: loststar
     * @time: 2022/2/1 10:53
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">BloomFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">(</span>DEFAULT_INITIAL_CAPACITY<span class="token punctuation">,</span> DEFAULT_INITIAL_MISJUDGMENT_RATE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/**
     * 使用指定的元素个数和默认误判率(0.01)构建一个布隆过滤器
     *
     * @param capacity
     * @author: loststar
     * @time: 2022/2/1 10:52
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">BloomFilter</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">(</span>capacity<span class="token punctuation">,</span> DEFAULT_INITIAL_MISJUDGMENT_RATE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/**
     * 使用指定的元素个数和误判率构建一个布隆过滤器
     *
     * @param capacity        过滤器内元素的个数
     * @param misjudgmentRate 误判率
     * @author: loststar
     * @time: 2022/2/1 10:45
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">BloomFilter</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">,</span> <span class="token keyword">double</span> misjudgmentRate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">calculateLengthOfBitSet</span><span class="token punctuation">(</span>capacity<span class="token punctuation">,</span> misjudgmentRate<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">calculateNumHashFunctions</span><span class="token punctuation">(</span>capacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
        bitSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BitSet</span><span class="token punctuation">(</span>bitSetLength<span class="token punctuation">)</span><span class="token punctuation">;</span>
        hashFunctions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MultiplyPrimeHash</span><span class="token punctuation">(</span>numHashFunctions<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/**
     * 向布隆过滤器添加一个元素
     *
     * @param value 要添加的元素
     * @author: loststar
     * @time: 2022/2/1 11:09
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">T</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hashArray <span class="token operator">=</span> hashFunctions<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> hash <span class="token operator">:</span> hashArray<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            bitSet<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>hash <span class="token operator">%</span> bitSetLength<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">/**
     * 向布隆过滤器批量添加一组元素
     *
     * @param values 包含要添加的元素的数组
     * @author: loststar
     * @time: 2022/2/1 16:17
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">T</span> value <span class="token operator">:</span> values<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/**
     * 判断元素是否在布隆过滤器内
     *
     * @param value 被判断的元素
     * @return: boolean 元素是否在布隆过滤器内
     * @author: loststar
     * @time: 2022/2/1 11:15
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">T</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hashArray <span class="token operator">=</span> hashFunctions<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> hash <span class="token operator">:</span> hashArray<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bitSet<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>hash <span class="token operator">%</span> bitSetLength<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/**
     * 计算位数组的长度，m=-n*ln(p)/(ln2)^2
     *
     * @param capacity        过滤器内元素的个数
     * @param misjudgmentRate 误判率
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">calculateLengthOfBitSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">,</span> <span class="token keyword">double</span> misjudgmentRate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>bitSetLength <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token operator">-</span>capacity <span class="token operator">*</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>misjudgmentRate<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/**
     * 计算位需要的函数个数，k=ln2*m/n
     *
     * @param capacity 过滤器内元素的个数
     * @author: loststar
     * @time: 2022/2/1 10:56
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">calculateNumHashFunctions</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>numHashFunctions <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bitSetLength <span class="token operator">/</span> capacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/**
     * 计算bitset内1的占比
     *
     * @return: double 1的比例
     * @author: loststar
     * @time: 2022/2/1 13:12
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calculateTrueBitProportion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> bitSet<span class="token punctuation">.</span><span class="token function">cardinality</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> bitSetLength<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getBitSetLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> bitSetLength<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNumberOfHashAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> numHashFunctions<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCardinality</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> bitSet<span class="token punctuation">.</span><span class="token function">cardinality</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h2><p>所有的哈希函数集合都会实现<code>hash</code>方法，用于计算<code>key</code>的<code>numHashFunctions</code>个哈希值，并返回。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>loststar<span class="token punctuation">.</span>bloomfilter<span class="token punctuation">.</span>hash</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">HashFunction</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hashResult<span class="token punctuation">;</span>
    <span class="token keyword">int</span> numHashFunctions<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">HashFunction</span><span class="token punctuation">(</span><span class="token keyword">int</span> numHashFunctions<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>numHashFunctions <span class="token operator">=</span> numHashFunctions<span class="token punctuation">;</span>
        hashResult <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>numHashFunctions<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里使用的哈希函数思路来源于<a href="https://juejin.cn/user/1732486054290263">秦怀杂货店 - 掘金 (juejin.cn)</a>和HahMap的哈希函数</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>loststar<span class="token punctuation">.</span>bloomfilter<span class="token punctuation">.</span>hash</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MultiplyPrimeHash</span> <span class="token keyword">extends</span> <span class="token class-name">HashFunction</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> PRIME_SEED <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">71</span><span class="token punctuation">,</span> <span class="token number">73</span><span class="token punctuation">,</span> <span class="token number">79</span><span class="token punctuation">,</span> <span class="token number">83</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">,</span> <span class="token number">107</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">,</span> <span class="token number">113</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">MultiplyPrimeHash</span><span class="token punctuation">(</span><span class="token keyword">int</span> numHashFunctions<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>numHashFunctions<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 类似HashMap的实现，结果乘以seed</span>
        <span class="token keyword">int</span> h<span class="token punctuation">;</span>
        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>h <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">>>></span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numHashFunctions<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">int</span> curHash <span class="token operator">=</span> res <span class="token operator">*</span> PRIME_SEED<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">// 取绝对值</span>
            hashResult<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>curHash <span class="token operator">^</span> <span class="token punctuation">(</span>curHash <span class="token operator">>></span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>curHash <span class="token operator">>></span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> hashResult<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>现实中更广泛使用的还有MurmurHash等，感兴趣的可以看<a href="https://en.wikipedia.org/wiki/MurmurHash">MurmurHash - Wikipedia</a>。</p>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="测试指标"><a href="#测试指标" class="headerlink" title="测试指标"></a>测试指标</h2><p>这也算是个二分类问题，于是使用混淆矩阵作为评价。在参考文献6中可以找到相关的介绍。</p>
<h2 id="测试过程"><a href="#测试过程" class="headerlink" title="测试过程"></a>测试过程</h2><p>先往布隆过滤器中添加0-9000，随后测试1000-6000（出现过）以及10000-13000（之前未输入）的预测情况。代码内<code>truePositive</code>、<code>falsePositive</code>、<code>falseNegative</code>、<code>trueNegative</code>的意义同样参见参考文献6。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token class-name">BloomFilter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> bloomFilter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BloomFilter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">15000</span><span class="token punctuation">,</span> <span class="token number">0.001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> truePositive <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> falsePositive <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> falseNegative <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> trueNegative <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">9000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        bloomFilter<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>bloomFilter<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            truePositive<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            falseNegative<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">13000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bloomFilter<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            trueNegative<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            falsePositive<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">formattedOutput</span><span class="token punctuation">(</span>bloomFilter<span class="token punctuation">,</span> truePositive<span class="token punctuation">,</span> falsePositive<span class="token punctuation">,</span> falseNegative<span class="token punctuation">,</span> trueNegative<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="格式化打印结果"><a href="#格式化打印结果" class="headerlink" title="格式化打印结果"></a>格式化打印结果</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">formattedOutput</span><span class="token punctuation">(</span><span class="token class-name">BloomFilter</span> bloomFilter<span class="token punctuation">,</span> <span class="token keyword">int</span> truePositive<span class="token punctuation">,</span> <span class="token keyword">int</span> falsePositive<span class="token punctuation">,</span> <span class="token keyword">int</span> falseNegative<span class="token punctuation">,</span> <span class="token keyword">int</span> trueNegative<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------------Bloom Filter----------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*********布隆过滤器参数*********"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数组长度："</span> <span class="token operator">+</span> bloomFilter<span class="token punctuation">.</span><span class="token function">getBitSetLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"函数个数："</span> <span class="token operator">+</span> bloomFilter<span class="token punctuation">.</span><span class="token function">getNumberOfHashAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1的占比："</span> <span class="token operator">+</span> bloomFilter<span class="token punctuation">.</span><span class="token function">calculateTrueBitProportion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"***********预测情况***********"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>truePositive <span class="token operator">+</span> <span class="token string">"(TP) "</span> <span class="token operator">+</span> falsePositive <span class="token operator">+</span> <span class="token string">"(FP) "</span> <span class="token operator">+</span> falseNegative <span class="token operator">+</span> <span class="token string">"(FN) "</span> <span class="token operator">+</span> trueNegative <span class="token operator">+</span> <span class="token string">"(TN)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"精确度："</span> <span class="token operator">+</span> truePositive <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span>truePositive <span class="token operator">+</span> falsePositive<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正拒率/召回率："</span> <span class="token operator">+</span> truePositive <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span>truePositive <span class="token operator">+</span> falseNegative<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"误拒率："</span> <span class="token operator">+</span> falsePositive <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span>falsePositive <span class="token operator">+</span> trueNegative<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><p>可以看到，当布隆过滤器认定元素未被输入时，结果一定可信（FN）。当布隆过滤器认定为曾经输入过时，有一定几率误判（FP），总体上符合预期。</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">---------------------Bloom Filter----------------------
*********布隆过滤器参数*********
数组长度：215664
函数个数：10
1的占比：0.30474719934713257
***********预测情况***********
5000(TP) 26(FP) 0(FN) 2974(TN)
精确度：0.9948269001193792
正拒率&#x2F;召回率：1.0
误拒率：0.008666666666666666

进程已结束,退出代码0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol>
<li><a href="https://en.wikipedia.org/wiki/Bloom_filter">Bloom filter - Wikipedia</a></li>
<li><a href="https://pages.cs.wisc.edu/~cao/papers/summary-cache/node8.html">Bloom Filters - the math (wisc.edu)</a></li>
<li><a href="https://stackoverflow.com/questions/658439/how-many-hash-functions-does-my-bloom-filter-need">algorithm - How many hash functions does my bloom filter need? - Stack Overflow</a></li>
<li><a href="https://github.com/01ly/bloompy">01ly/bloompy (github.com)</a></li>
<li><a href="https://juejin.cn/post/6961681011423838221">【实战问题】– 布隆过滤器的三种实践：手写，Redission以及Guava（2） - 掘金 (juejin.cn)</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/363924081">二分类模型评价标准：混淆矩阵 - 知乎 (zhihu.com)</a></li>
</ol>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>布隆过滤器</tag>
        <tag>Bloom Filter</tag>
        <tag>JAVA</tag>
        <tag>造轮子</tag>
      </tags>
  </entry>
  <entry>
    <title>应用Travis CI摆脱Hexo博客换机难</title>
    <url>/posts/d9cdb463/</url>
    <content><![CDATA[<p>一直以来，用Hexo+Github Page写博客都是一种<del>装逼</del>高端的做法。但是，HEXO写博客是生成静态文件再上传。当需要在别的电脑写博客的时候会比较麻烦。所以，现在使用Travis CI来解决这一问题。</p>
<h2 id="获取Personal-Access-Token"><a href="#获取Personal-Access-Token" class="headerlink" title="获取Personal Access Token"></a>获取Personal Access Token</h2><p>1.进入设置<br><img src="/posts/d9cdb463/Travis-CI-hexo1.JPG" alt="setting"></p>
<p>2.点击Personal Access Token</p>
<p><img src="/posts/d9cdb463/Travis-CI-hexo2.JPG" alt="Personal Access Token"></p>
<p>3.点击右上角的Generate new token</p>
<p><img src="/posts/d9cdb463/Travis-CI-hexo3.JPG" alt="new"></p>
<p>4.设置Token description，选择权限</p>
<p><img src="/posts/d9cdb463/Travis-CI-hexo4.JPG" alt="to-des"></p>
<p>5.点击Generate token</p>
<p>6.复制生成的Personal access tokens（注意：token只会在刚刚创建完成后<strong>显示一次</strong>，关闭页面后再打开不再显示）    </p>
<h2 id="配置Travis-CI"><a href="#配置Travis-CI" class="headerlink" title="配置Travis CI"></a>配置Travis CI</h2><p>1.用Github账号登陆Travis CI<br><img src="/posts/d9cdb463/5.JPG" alt="sign"></p>
<p>2.点击左上角的“+”<br><img src="/posts/d9cdb463/6.JPG" alt="add"></p>
<p>3.点击博客源码仓库前面的滑块<br>![open]7.JPG)</p>
<p>4.点击滑块旁边的设置</p>
<p>5.点击<code>Build only if .travis.yml is present</code>前面的滑块<br><img src="/posts/d9cdb463/8.JPG" alt="open"></p>
<p>6.在<code>Environment Variables</code>添加你的<code>Personal access tokens</code><br><img src="/posts/d9cdb463/9.JPG" alt="token"></p>
<p>7.点击add</p>
<h2 id="配置仓库文件"><a href="#配置仓库文件" class="headerlink" title="配置仓库文件"></a>配置仓库文件</h2><p>1.在源码仓库创建<code>.travis.yml</code></p>
<p>2.在文件内写入信息（以下供参考，更详细请参考<a href="https://docs.travis-ci.com/">Travis CI文档</a> )</p>
<pre class="line-numbers language-none"><code class="language-none">language: node_js
node_js: stable

# S: Build Lifecycle
install:
- npm install

#before_script:
# - npm install -g gulp

before_install:
- export TZ&#x3D;&#39;Asia&#x2F;Shanghai&#39;  # 设置时区
- npm install -g hexo
- npm install -g hexo-cli

script:
- hexo clean
- hexo g

after_script:
- cd .&#x2F;public
- git init
- git config user.name &quot;你的昵称&quot;
- git config user.email &quot;你的邮箱&quot;
- git add .
- git commit -m &quot;Update docs&quot;
- git push --force --quiet &quot;https:&#x2F;&#x2F;$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;&quot; master:master
# E: Build LifeCycle

branches:
  only:
    - master
env:
 global:
   - GH_REF: github.com&#x2F;*******&#x2F;********.github.io.git（Github Page仓库）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>1.写一篇新文章，push源码到github</p>
<p>2.在Travis CI就可以看到正在构建了（黄色）</p>
<p>3.build passing之后（绿色）就可以在博客网页看到新文章了。</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>博客相关</category>
      </categories>
      <tags>
        <tag>Travis CI</tag>
      </tags>
  </entry>
  <entry>
    <title>引用不可变和对象不可变的例子</title>
    <url>/posts/8bda9476/</url>
    <content><![CDATA[<h1 id="对象不可变"><a href="#对象不可变" class="headerlink" title="对象不可变"></a>对象不可变</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s1<span class="token operator">=</span><span class="token string">"Hi"</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s2<span class="token operator">=</span>s1<span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"操作前："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s1的内容："</span><span class="token operator">+</span>s1<span class="token operator">+</span><span class="token string">"  s2的内容："</span><span class="token operator">+</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s1的hashcode："</span><span class="token operator">+</span>s1<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">",s2的hashcode："</span><span class="token operator">+</span>s2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
s1<span class="token operator">+=</span><span class="token string">" Loststar"</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"操作后："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s1的内容："</span><span class="token operator">+</span>s1<span class="token operator">+</span><span class="token string">"  s2的内容："</span><span class="token operator">+</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s1的hashcode："</span><span class="token operator">+</span>s1<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">",s2的hashcode："</span><span class="token operator">+</span>s2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>结果：</p>
<pre class="line-numbers language-none"><code class="language-none">操作前：
s1的内容：Hi  s2的内容：Hi
s1的hashcode：2337,s2的hashcode：2337
操作后：
s1的内容：Hi Loststar  s2的内容：Hi
s1的hashcode：746752949,s2的hashcode：2337<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="引用不可变"><a href="#引用不可变" class="headerlink" title="引用不可变"></a>引用不可变</h1><p>用了<code>final</code>修饰变量</p>
<p>测试1：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"Hi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"操作前："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sb的内容："</span><span class="token operator">+</span>sb<span class="token operator">+</span><span class="token string">", sb的hashcode："</span><span class="token operator">+</span>sb<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" Loststar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"操作后："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sb的内容："</span><span class="token operator">+</span>sb<span class="token operator">+</span><span class="token string">", sb的hashcode："</span><span class="token operator">+</span>sb<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>结果：</p>
<pre class="line-numbers language-none"><code class="language-none">操作前：
sb的内容：Hi, sb的hashcode：2003749087
操作后：
sb的内容：Hi Loststar, sb的hashcode：2003749087<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>测试2：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"Hi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sb<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"Hi Loststar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>结果报错：java: 无法为最终变量sb分配值</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>技术</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>对象不可变</tag>
        <tag>引用不可变</tag>
      </tags>
  </entry>
  <entry>
    <title>排序复习</title>
    <url>/posts/e45aa11e/</url>
    <content><![CDATA[<blockquote>
<p>更多请参考：</p>
<p><a href="https://en.wikipedia.org/wiki/Sorting_algorithm">Sorting algorithm - Wikipedia</a></p>
<p><a href="https://zh.wikipedia.org/wiki/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95">排序算法 - 维基百科，自由的百科全书</a></p>
<p>中英文内容略有差别，其中中文没有最好情况，但是在复杂度、稳定性的比较中考虑了是用数组还是链表存储。</p>
</blockquote>
<h1 id="复杂度及稳定性"><a href="#复杂度及稳定性" class="headerlink" title="复杂度及稳定性"></a>复杂度及稳定性</h1><table>
<thead>
<tr>
<th align="center">排序方式</th>
<th align="center">平均时间复杂度</th>
<th align="center">最好时间复杂度</th>
<th align="center">最坏时间复杂度</th>
<th align="center">辅助空间</th>
<th align="center">稳定性</th>
</tr>
</thead>
<tbody><tr>
<td align="center">冒泡排序</td>
<td align="center">O(n^2)</td>
<td align="center">O(n)</td>
<td align="center">O(n^2)</td>
<td align="center">O(1)</td>
<td align="center">稳定</td>
</tr>
<tr>
<td align="center">选择排序</td>
<td align="center">O(n^2)</td>
<td align="center">O(n^2)</td>
<td align="center">O(n^2)</td>
<td align="center">O(1)</td>
<td align="center">不稳定</td>
</tr>
<tr>
<td align="center">插入排序</td>
<td align="center">O(n^2)</td>
<td align="center">O(n)</td>
<td align="center">O(n^2)</td>
<td align="center">O(1)</td>
<td align="center">稳定</td>
</tr>
<tr>
<td align="center">希尔排序</td>
<td align="center">O(n^(4/3))</td>
<td align="center">O(nlogn)</td>
<td align="center">O(n^(3/2))</td>
<td align="center">O(1)</td>
<td align="center">不稳定</td>
</tr>
<tr>
<td align="center">快速排序</td>
<td align="center">O(nlogn)</td>
<td align="center">O(nlogn)</td>
<td align="center">O(n^2)</td>
<td align="center">O(logn)</td>
<td align="center">不稳定</td>
</tr>
<tr>
<td align="center">堆排序</td>
<td align="center">O(nlogn)</td>
<td align="center">O(nlogn)</td>
<td align="center">O(nlogn)</td>
<td align="center">O(1)</td>
<td align="center">不稳定</td>
</tr>
</tbody></table>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>所有排序类继承于抽象类<code>Sort</code></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util</span><span class="token punctuation">.</span><span class="token class-name">Arrays</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Sort</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">protected</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>nums <span class="token operator">=</span> nums<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printNums</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"轮循环后："</span><span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> isDebug<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>其中，<code>nums</code>数组用于存放被排序的数；<code>sort</code>方法用于实现排序，其中参数<code>isDebug</code>用于声明是否输出每一轮的结果；</p>
<p><code>printNums</code>方法用于打印排序中间结果。</p>
<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><h3 id="传统冒泡排序"><a href="#传统冒泡排序" class="headerlink" title="传统冒泡排序"></a>传统冒泡排序</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BubbleSort</span> <span class="token keyword">extends</span> <span class="token class-name">Sort</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token class-name">BubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> isDebug<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token function">swap</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>isDebug<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token function">printNums</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>
        nums<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span>
        nums<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="记忆最后更改位置的冒泡排序"><a href="#记忆最后更改位置的冒泡排序" class="headerlink" title="记忆最后更改位置的冒泡排序"></a>记忆最后更改位置的冒泡排序</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NewBubbleSort</span> <span class="token keyword">extends</span> <span class="token class-name">Sort</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token class-name">NewBubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> isDebug<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> compareTimes <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">int</span> lastCompare <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> compareTimes<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token function">swap</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    lastCompare <span class="token operator">=</span> j<span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
            compareTimes <span class="token operator">=</span> lastCompare<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>isDebug<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token function">printNums</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>lastCompare <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>
        nums<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span>
        nums<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SelectionSort</span> <span class="token keyword">extends</span> <span class="token class-name">Sort</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token class-name">SelectionSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> isDebug<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">int</span> minNumber <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> placeOfMinNumber <span class="token operator">=</span> i<span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> minNumber<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    minNumber <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    placeOfMinNumber <span class="token operator">=</span> j<span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token function">swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> placeOfMinNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>isDebug<span class="token punctuation">)</span>
                <span class="token function">printNums</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>
        nums<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span>
        nums<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InsertSort</span> <span class="token keyword">extends</span> <span class="token class-name">Sort</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token class-name">InsertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> isDebug<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">int</span> isSorted<span class="token operator">=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> thisNum<span class="token operator">=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>isSorted<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>thisNum<span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>isSorted<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    nums<span class="token punctuation">[</span>isSorted<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>isSorted<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    isSorted<span class="token operator">--</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
            nums<span class="token punctuation">[</span>isSorted<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>thisNum<span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>isDebug<span class="token punctuation">)</span>
                <span class="token function">printNums</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShellSort</span> <span class="token keyword">extends</span> <span class="token class-name">Sort</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">StepListType</span> stepListType<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">StepListType</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//https://en.wikipedia.org/wiki/Shellsort</span>
        SHELL<span class="token punctuation">,</span>
        FRANK_LAZARUS<span class="token punctuation">,</span>
        HIBBARD
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">ShellSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token class-name">StepListType</span> stepListType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>stepListType <span class="token operator">=</span> stepListType<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> isDebug<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> length <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stepList <span class="token operator">=</span> <span class="token function">generateStepList</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stepListType<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> step <span class="token operator">:</span> stepList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> step<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">int</span> isSorted <span class="token operator">=</span> i <span class="token operator">-</span> step<span class="token punctuation">;</span>
                <span class="token keyword">int</span> thisNum <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span>isSorted <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> thisNum <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>isSorted<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    nums<span class="token punctuation">[</span>isSorted <span class="token operator">+</span> step<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>isSorted<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    isSorted <span class="token operator">-=</span> step<span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                nums<span class="token punctuation">[</span>isSorted <span class="token operator">+</span> step<span class="token punctuation">]</span> <span class="token operator">=</span> thisNum<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>isDebug<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">printNums</span><span class="token punctuation">(</span>step<span class="token punctuation">,</span> i <span class="token operator">-</span> step<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">generateStepList</span><span class="token punctuation">(</span><span class="token keyword">int</span> length<span class="token punctuation">,</span> <span class="token class-name">StepListType</span> type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//生成步长</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">case</span> SHELL <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> step <span class="token operator">=</span> length<span class="token punctuation">;</span> <span class="token comment">//必须</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span>step <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    step <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>step <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">return</span> list<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">case</span> FRANK_LAZARUS <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> step <span class="token operator">=</span> length<span class="token punctuation">;</span> <span class="token comment">//没啥意义，大于1就行</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span>step <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    step <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>length <span class="token operator">/</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    k<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">return</span> list<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">case</span> HIBBARD <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> step <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span>step <span class="token operator">&lt;</span> length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    k<span class="token operator">++</span><span class="token punctuation">;</span>
                    step <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> list<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span>EMPTY_LIST<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printNums</span><span class="token punctuation">(</span><span class="token keyword">int</span> step<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"步长为"</span> <span class="token operator">+</span> step <span class="token operator">+</span> <span class="token string">"的第"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"轮循环后："</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util</span><span class="token punctuation">.</span><span class="token class-name">Arrays</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuickSort</span> <span class="token keyword">extends</span> <span class="token class-name">Sort</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token class-name">QuickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token class-name">Partition</span><span class="token punctuation">(</span><span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> pivotKey <span class="token operator">=</span> nums<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> low<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> low<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> high<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> pivotKey<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token function">swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
                i<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token function">swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">RealQuickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isDebug<span class="token punctuation">,</span> <span class="token keyword">int</span> recursionDepth<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//如果不需要打印分步之类的信息，保留low/high就行了</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">int</span> pivotLoc <span class="token operator">=</span> <span class="token class-name">Partition</span><span class="token punctuation">(</span>low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>isDebug<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">printNums</span><span class="token punctuation">(</span>recursionDepth<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token class-name">RealQuickSort</span><span class="token punctuation">(</span>low<span class="token punctuation">,</span> pivotLoc <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> isDebug<span class="token punctuation">,</span> recursionDepth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">RealQuickSort</span><span class="token punctuation">(</span>pivotLoc <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">,</span> isDebug<span class="token punctuation">,</span> recursionDepth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> isDebug<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">RealQuickSort</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> isDebug<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>
        nums<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span>
        nums<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printNums</span><span class="token punctuation">(</span><span class="token keyword">int</span> recursionDepth<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"递归深度为"</span> <span class="token operator">+</span> recursionDepth <span class="token operator">+</span> <span class="token string">"时："</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeapSort</span> <span class="token keyword">extends</span> <span class="token class-name">Sort</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">public</span> <span class="token class-name">HeapSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">heaptify</span><span class="token punctuation">(</span><span class="token keyword">int</span> parent<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>parent<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> child <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> parent <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 左孩子</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>child <span class="token operator">&lt;</span> length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>child <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> length <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>child<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>child <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token comment">// 选左右孩子更大那个</span>
                child <span class="token operator">=</span> child <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//右孩子更大</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">>=</span> nums<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            nums<span class="token punctuation">[</span>parent<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">;</span>
            parent <span class="token operator">=</span> child<span class="token punctuation">;</span> <span class="token comment">//从上而下调整</span>
            child <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> child <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        nums<span class="token punctuation">[</span>parent<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildHeap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> length <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> length <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 从右往左，从下往上,从最右下的非叶子节点开始</span>
            <span class="token function">heaptify</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> isDebug<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> length <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token function">buildHeap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// n-1次循环</span>
            <span class="token function">swap</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//第一个元素和未排序的最后一个交换</span>
            <span class="token function">heaptify</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>isDebug<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token function">printNums</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h1 id="分类总结"><a href="#分类总结" class="headerlink" title="分类总结"></a>分类总结</h1><h2 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h2><p><strong>稳定：</strong> 冒泡排序、插入排序</p>
<p><strong>不稳定：</strong> 选择排序、快速排序、希尔排序、堆排序</p>
<h2 id="平均时间复杂度"><a href="#平均时间复杂度" class="headerlink" title="平均时间复杂度"></a>平均时间复杂度</h2><p><strong>O(n^2)：</strong> 冒泡排序、选择排序、插入排序</p>
<p><strong>O(nlogn)：</strong> 快速排序、堆排序</p>
<p><strong>O(n^(4/3))：</strong> 希尔排序</p>
<h2 id="辅助空间"><a href="#辅助空间" class="headerlink" title="辅助空间"></a>辅助空间</h2><p><strong>O(1)：</strong> 冒泡排序、选择排序、插入排序、堆排序</p>
<p><strong>O(logn)：</strong> 快速排序</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>冒泡排序</tag>
        <tag>插入排序</tag>
        <tag>选择排序</tag>
      </tags>
  </entry>
  <entry>
    <title>推荐一个展示示repo的hexo插件</title>
    <url>/posts/7a64e458/</url>
    <content><![CDATA[<p>在博客展示github repo几乎是一个刚需。<br>在使用Typecho的时候我就曾做了个小插件来自娱自乐。</p>
<div style="text-align: center">
  <div class="github-card" data-user="loststar" data-repo="ShowGithubRepo" data-height="200" data-width="400" data-theme="default" data-target data-client-id data-client-secret></div>
</div>
<script src="/github-card-lib/githubcard.js"></script>


<p>现在换到hexo平台，发现早有前人造好了轮子。</p>
<div style="text-align: center">
  <div class="github-card" data-user="Gisonrg" data-repo="hexo-github-card" data-height="200" data-width="400" data-theme="default" data-target data-client-id data-client-secret></div>
</div>
<script src="/github-card-lib/githubcard.js"></script>


<h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs">&#123;% githubCard user:your_user [repo:your_repo] [width:400] [height:200] [theme:default] [client_id:your_client_id] [client_secret:your_client_secret] [align:text-align_position] %&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<table>
<thead>
<tr>
<th>Argument</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>user</td>
<td>GitHub user name</td>
</tr>
<tr>
<td>repo</td>
<td>(Optional) GitHub repository name of the user. If omit then display only the user profile</td>
</tr>
<tr>
<td>height</td>
<td>(Optional) Widget’s height (in ‘px’). Default is 200.</td>
</tr>
<tr>
<td>width</td>
<td>(Optional) Widget’s width (in ‘px’). Default is 400.</td>
</tr>
<tr>
<td>client_id</td>
<td>(Optional) Your GitHub app client_id</td>
</tr>
<tr>
<td>client_secret</td>
<td>(Optional) Your GitHub app client_secret</td>
</tr>
<tr>
<td>align</td>
<td>(Optional) What kind of text-align is you want. Default is center.</td>
</tr>
</tbody></table>
<h1 id="替换CDN"><a href="#替换CDN" class="headerlink" title="替换CDN"></a>替换CDN</h1><p>修改<code>/node_modules/hexo-github-card/index.html</code>，将第13行改为：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//cdn.jsdelivr.net/github-cards/latest/widget.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h1 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h1><div style="text-align: center">
  <div class="github-card" data-user="loststar" data-repo data-height="200" data-width="400" data-theme="default" data-target data-client-id data-client-secret></div>
</div>
<script src="/github-card-lib/githubcard.js"></script>


<div style="text-align: center">
  <div class="github-card" data-user="loststar" data-repo="ShowGithubRepo" data-height="200" data-width="400" data-theme="default" data-target data-client-id data-client-secret></div>
</div>
<script src="/github-card-lib/githubcard.js"></script>


<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>工具分享</category>
      </categories>
      <tags>
        <tag>插件</tag>
        <tag>github</tag>
        <tag>repo</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统实验1--Linux命令解析程序设计与实现</title>
    <url>/posts/9de5b70b/</url>
    <content><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>​    探索、理解并掌握操作系统命令释器的设计原和实现机制，基于 Linux内核进行相应命令解释程序的设计和实现，并在 Linux操作平台上加以实现。</p>
<h2 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h2><p>Linux 命令解释程序功能设计要求：<br>（1）选取和设计实现一组内部命令（五条以上）；<br>（2）外部命令执行采用直接调用 exec 系统调用的方式来实现；<br>（3）至少一条内部命令采用直接调用相应系统调用的方式来实现；<br>（4）系统环境变量（至少包括当前目录）支持；<br>（5）在 Linux 操作系统上启用（或替换原命令解释程序 Shell）并测试验证。</p>
<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><h3 id="函数一览"><a href="#函数一览" class="headerlink" title="函数一览"></a>函数一览</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">print_welcome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//打印欢迎信息</span>
<span class="token keyword">void</span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>src<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>separator<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>dest<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//分割输入的命令</span>
<span class="token keyword">void</span> <span class="token function">my_cd</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//内部命令cd的实现</span>
<span class="token keyword">void</span> <span class="token function">my_pwd</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//内部命令pwd的实现</span>
<span class="token keyword">void</span> <span class="token function">my_echo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//内部命令echo的实现</span>
<span class="token keyword">void</span> <span class="token function">my_exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//内部命令exit的实现</span>
HQueue <span class="token function">init_history</span><span class="token punctuation">(</span>HQueue q<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//历史记录队列初始化</span>
HQueue <span class="token function">add_history</span><span class="token punctuation">(</span>HQueue q<span class="token punctuation">,</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//添加历史记录</span>
<span class="token keyword">void</span> <span class="token function">my_history</span><span class="token punctuation">(</span>HQueue q<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//内部命令history的实现</span>
<span class="token keyword">int</span> <span class="token function">check_env</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//环境变量的支持</span>
<span class="token keyword">void</span> <span class="token function">my_outer</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//外部命令的实现</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="数据结构和全局变量定义"><a href="#数据结构和全局变量定义" class="headerlink" title="数据结构和全局变量定义"></a>数据结构和全局变量定义</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> IS_STOP<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//是否退出myshell</span>
<span class="token keyword">char</span> cmd<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//输入的命令</span>
<span class="token keyword">char</span> historycmd<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//输入的命令的备份，用作历史记录</span>
<span class="token keyword">char</span> <span class="token operator">*</span>arr<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//命令分割后存储</span>
<span class="token keyword">char</span> <span class="token operator">*</span>env<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"/home"</span><span class="token punctuation">,</span><span class="token string">"/usr"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//环境变量</span>
<span class="token keyword">int</span> env_N<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">//环境变量数</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">HistoryNode</span>
<span class="token punctuation">&#123;</span> <span class="token comment">//历史记录队列节点</span>
    <span class="token keyword">char</span> cmd<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">HistoryNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>HNode<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">HistoryQueue</span>
<span class="token punctuation">&#123;</span> <span class="token comment">//历史记录队列</span>
    HNode <span class="token operator">*</span>head<span class="token punctuation">,</span><span class="token operator">*</span>tail<span class="token punctuation">;</span>
    <span class="token keyword">int</span> num<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>HQueue<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="详细设计"><a href="#详细设计" class="headerlink" title="详细设计"></a>详细设计</h2><h3 id="内部命令cd的设计"><a href="#内部命令cd的设计" class="headerlink" title="内部命令cd的设计"></a>内部命令cd的设计</h3><p>​    cd命令的作用是切换工作目录，直接使用了系统调用，设计如下：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">my_cd</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span><span class="token function">syscall</span><span class="token punctuation">(</span>SYS_access<span class="token punctuation">,</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">syscall</span><span class="token punctuation">(</span>SYS_chdir<span class="token punctuation">,</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"目录不存在！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    该函数使用了syscall 来调用系统调用SYS_access 来判断目录是否存在，以及使用了系统调用 SYS_chdir 来切换目录。</p>
<h3 id="内部命令pwd的设计"><a href="#内部命令pwd的设计" class="headerlink" title="内部命令pwd的设计"></a>内部命令pwd的设计</h3><p>​    pwd命令的作用是显示工作目录，设计如下：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">my_pwd</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> wd<span class="token punctuation">[</span><span class="token number">4096</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token function">getcwd</span><span class="token punctuation">(</span>wd<span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    该函数使用了 getcwd 函数来获取路径并且存入字符数组wd中，用puts输出</p>
<h3 id="内部命令echo的设计"><a href="#内部命令echo的设计" class="headerlink" title="内部命令echo的设计"></a>内部命令echo的设计</h3><p>​    echo命令的作用是输出命令里的字符，设计如下：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">my_echo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> temp<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span>historycmd<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        temp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span>historycmd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">puts</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="内部命令history的设计"><a href="#内部命令history的设计" class="headerlink" title="内部命令history的设计"></a>内部命令history的设计</h3><p>​    history命令的作用是显示历史输入的命令，设计如下：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//在程序开始之初调用，初始化链队列</span>
HQueue <span class="token function">init_history</span><span class="token punctuation">(</span>HQueue q<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    q<span class="token punctuation">.</span>head<span class="token operator">=</span><span class="token punctuation">(</span>HNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>HNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>head<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"init_history申请内存错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    q<span class="token punctuation">.</span>tail<span class="token operator">=</span>q<span class="token punctuation">.</span>head<span class="token punctuation">;</span>
    q<span class="token punctuation">.</span>num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> q<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//该函数在每输入一条非空指令后调用，将新输入的指令存入链队列</span>
HQueue <span class="token function">add_history</span><span class="token punctuation">(</span>HQueue q<span class="token punctuation">,</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    HNode <span class="token operator">*</span>temp<span class="token operator">=</span><span class="token punctuation">(</span>HNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>HNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"add_history申请内存错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    q<span class="token punctuation">.</span>tail<span class="token operator">-></span>next<span class="token operator">=</span>temp<span class="token punctuation">;</span>
    q<span class="token punctuation">.</span>tail<span class="token operator">=</span>q<span class="token punctuation">.</span>tail<span class="token operator">-></span>next<span class="token punctuation">;</span>
    q<span class="token punctuation">.</span>num<span class="token operator">=</span>q<span class="token punctuation">.</span>num<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>tail<span class="token operator">-></span>cmd<span class="token punctuation">,</span>historycmd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> q<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//该函数按顺序输出序号和历史指令</span>
<span class="token keyword">void</span> <span class="token function">my_history</span><span class="token punctuation">(</span>HQueue q<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    HNode <span class="token operator">*</span>temp<span class="token operator">=</span>q<span class="token punctuation">.</span>head<span class="token operator">-></span>next<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"链表错误！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>q<span class="token punctuation">.</span>num<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">puts</span><span class="token punctuation">(</span>temp<span class="token operator">-></span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        temp<span class="token operator">=</span>temp<span class="token operator">-></span>next<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="内部命令exit的设计"><a href="#内部命令exit的设计" class="headerlink" title="内部命令exit的设计"></a>内部命令exit的设计</h3><p>​    exit的作用是退出shell</p>
<pre class="line-numbers language-none"><code class="language-none">void my_exit()
&#123;
    printf(&quot;即将退出myshell\n&quot;);
    IS_STOP&#x3D;1;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    该函数将全局变量 IS_STOP 置为1，主循环独取后会停止</p>
<h3 id="环境变量的支持"><a href="#环境变量的支持" class="headerlink" title="环境变量的支持"></a>环境变量的支持</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">check_env</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> is_exist<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> wd<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">access</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">getcwd</span><span class="token punctuation">(</span>wd<span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">strcat</span><span class="token punctuation">(</span>wd<span class="token punctuation">,</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">strcat</span><span class="token punctuation">(</span>wd<span class="token punctuation">,</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        is_exist<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> i<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>env_N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">strcpy</span><span class="token punctuation">(</span>wd<span class="token punctuation">,</span>env<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">strcat</span><span class="token punctuation">(</span>wd<span class="token punctuation">,</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">strcat</span><span class="token punctuation">(</span>wd<span class="token punctuation">,</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">access</span><span class="token punctuation">(</span>wd<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                is_exist<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>is_exist<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s在环境变量内!"</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"路径是：%s\n执行结果：\n"</span><span class="token punctuation">,</span>wd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        pid_t pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token function">execvp</span><span class="token punctuation">(</span>wd<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token number">255</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token function">wait</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> is_exist<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    该函数使用access搜索在给定路径集合env里是否存在名为 arr[0] 的可执行程序，若存在则执行。</p>
<h3 id="外部命令的实现"><a href="#外部命令的实现" class="headerlink" title="外部命令的实现"></a>外部命令的实现</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">my_outer</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s是外部命令！\n执行结果：\n"</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pid_t pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">execvp</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">wait</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>该函数使用exec调用外部命令</p>
<h3 id="主函数设计"><a href="#主函数设计" class="headerlink" title="主函数设计"></a>主函数设计</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">print_welcome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出欢迎信息</span>
    <span class="token keyword">int</span> num<span class="token punctuation">;</span>
    <span class="token comment">//链队列初始化</span>
    HQueue history<span class="token punctuation">;</span>
    history<span class="token operator">=</span><span class="token function">init_history</span><span class="token punctuation">(</span>history<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>IS_STOP<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//循环直到遇到exit</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"myshell> "</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//命令提示符</span>
        <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">fgets</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//读入命令</span>
        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>cmd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    
        <span class="token punctuation">&#123;</span>
            i<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        cmd<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span> <span class="token comment">//将\n替换为\0</span>
        <span class="token function">strcpy</span><span class="token punctuation">(</span>historycmd<span class="token punctuation">,</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> cmd<span class="token punctuation">;</span>
        <span class="token function">split</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//分割命令</span>
        arr<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>

        <span class="token comment">//无输入</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">//内部命令</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"cd"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//内部命令cd</span>
            <span class="token function">my_cd</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"pwd"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//内部命令pwd</span>
            <span class="token function">my_pwd</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"echo"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//内部命令echo</span>
            <span class="token function">my_echo</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"history"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//内部命令history</span>
            <span class="token function">my_history</span><span class="token punctuation">(</span>history<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"exit"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//内部命令exit</span>
            <span class="token function">my_exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">//环境变量</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check_env</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

        <span class="token comment">//外部命令</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">my_outer</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        history<span class="token operator">=</span><span class="token function">add_history</span><span class="token punctuation">(</span>history<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//历史记录</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="验证测试"><a href="#验证测试" class="headerlink" title="验证测试"></a>验证测试</h2><h3 id="欢迎界面"><a href="#欢迎界面" class="headerlink" title="欢迎界面"></a>欢迎界面</h3><p><img src="/posts/9de5b70b/1.png"></p>
<h3 id="内部命令"><a href="#内部命令" class="headerlink" title="内部命令"></a>内部命令</h3><h4 id="cd-和-pwd-命令"><a href="#cd-和-pwd-命令" class="headerlink" title="cd 和 pwd 命令"></a>cd 和 pwd 命令</h4><p>用pwd命令显示当前目录，cd切换后再用pwd显示切换后的目录</p>
<p><img src="/posts/9de5b70b/2.png"></p>
<p>与预期相符</p>
<h4 id="echo-命令"><a href="#echo-命令" class="headerlink" title="echo 命令"></a>echo 命令</h4><p>输出hello 17281144</p>
<p><img src="/posts/9de5b70b/3.png"></p>
<p>与预期相符</p>
<h4 id="history-命令"><a href="#history-命令" class="headerlink" title="history 命令"></a>history 命令</h4><p>输出历史</p>
<p><img src="/posts/9de5b70b/4.png"></p>
<p>与预期相符</p>
<h4 id="exit命令"><a href="#exit命令" class="headerlink" title="exit命令"></a>exit命令</h4><p>退出shell</p>
<p><img src="/posts/9de5b70b/5.png"></p>
<p>与预期相符</p>
<h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>将如下代码编译成为名为 hello 的可执行文件，放在 /home 目录下，并且将目录加入 env 数组。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello World\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>直接输入hello</p>
<p><img src="/posts/9de5b70b/6.png"></p>
<p>与预期相符</p>
<h3 id="外部命令"><a href="#外部命令" class="headerlink" title="外部命令"></a>外部命令</h3><p>以ping 命令作为示例</p>
<p><img src="/posts/9de5b70b/7.png"></p>
<p>与预期相符</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>课程作业</category>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>实验</tag>
        <tag>命令解析</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统实验2--银行家算法模拟实现</title>
    <url>/posts/aa64c4bc/</url>
    <content><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>利用 C 语言设计与实现银行家算法，构建计算机系统资源的模拟管理和处理场景并对自己的银行家算法实现方案加以测试验证。</p>
<h2 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h2><ol>
<li>基于 C语言的银行家算法的设计与实现</li>
<li>计算机系统资源的模拟管理和处理场景的构建（初始化操作包括系统各类资源配备情况、一组并发进程及相应资源最大需求明细，进程申请资源操作需要指定进程及其对所需各类资源的申请数量，进程释放资源操作需要指定进程及其对当前所占用各类资源的释放数量）</li>
<li>算法原型应能正确处理进程申请/释放资源的各种操作请求</li>
<li>针对银行家算法原型开展基于计算机系统资源管理的完备的测试验证</li>
</ol>
<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><h3 id="宏定义、全局变量和结构体定义"><a href="#宏定义、全局变量和结构体定义" class="headerlink" title="宏定义、全局变量和结构体定义"></a>宏定义、全局变量和结构体定义</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#define TRUE 1
#define FALSE 0
#define ERR -1
#define N 5
#define SUCCESS 0

typedef struct Resource
&#123;
    int A;
    int B;
    int C;
&#125;RES;

typedef struct Request
&#123;
    int id;
    RES res;
&#125;REQ;

RES Available,Work,Max[N],Allocation[N]&#x3D;&#123;&#123;0,0,0&#125;&#125;,Need[N];
REQ Request;
int Finish[N];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>N是进程数，TRUE FALSE ERR SUCCESS是标志位，Resource结构体存储资源，Request结构体存储请求，Available Work Max[N] Allocation[N] Need[N] Request Finish对应银行家算法里的各个部分。</p>
<h3 id="函数一览"><a href="#函数一览" class="headerlink" title="函数一览"></a>函数一览</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">void init();
void run();
int isAllFinish(int* finish);
int cmpReqNeed();
int cmpReqAvailable();
int preAllocate();
int safeCheck();
int isASmallerB(RES A,RES B);
RES add(RES A,RES B);
RES minus(RES A,RES B);
void printLog();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="详细设计"><a href="#详细设计" class="headerlink" title="详细设计"></a>详细设计</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">void init()
&#123;
    printf(&quot;输入总资源数(A B C):\n&quot;);
    scanf(&quot;%d%d%d&quot;,&amp;Available.A,&amp;Available.B,&amp;Available.C);
    printf(&quot;依次输入%d个进程所需最大资源(A B C):\n&quot;,N);
    for(int i&#x3D;0;i&lt;N;i++)
    &#123;
        scanf(&quot;%d%d%d&quot;,&amp;Max[i].A,&amp;Max[i].B,&amp;Max[i].C);
        Need[i]&#x3D;Max[i];
    &#125;
    return;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>获取用户输入的总资源数和每个进程所需最大资源数，并且开始时每个Allocation 资源都是0，所以Need 赋值为 Max。</p>
<h3 id="结构体工具函数"><a href="#结构体工具函数" class="headerlink" title="结构体工具函数"></a>结构体工具函数</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">RES add(RES A,RES B)
&#123;
    RES temp;
    temp.A&#x3D;A.A+B.A;
    temp.B&#x3D;A.B+B.B;
    temp.C&#x3D;A.C+B.C;
    return temp;
&#125;

RES minus(RES A,RES B)
&#123;
    RES temp;
    temp.A&#x3D;A.A-B.A;
    temp.B&#x3D;A.B-B.B;
    temp.C&#x3D;A.C-B.C;
    return temp;
&#125;

int isASmallerB(RES A,RES B)
&#123;
    if(A.A&lt;&#x3D;B.A&amp;&amp;A.B&lt;&#x3D;B.B&amp;&amp;A.C&lt;&#x3D;B.C)
    &#123;
        return TRUE;
    &#125;
    return FALSE;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>因为C语言没有运算符重载，所以自定义加、减、小于等于函数方便阅读和编写</p>
<h3 id="日志输出"><a href="#日志输出" class="headerlink" title="日志输出"></a>日志输出</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">void printLog()
&#123;
    printf(&quot;***Log Start***\n&quot;);
    printf(&quot;系统剩余资源:\n%d %d %d\n&quot;,Available.A,Available.B,Available.C);
    printf(&quot;线程需求资源:\n&quot;);
    for(int i&#x3D;0;i&lt;N;i++)
    &#123;
        printf(&quot;%d %d %d\n&quot;,Need[i].A,Need[i].B,Need[i].C);
    &#125;
    printf(&quot;完成情况:\n&quot;);
    for(int i&#x3D;0;i&lt;N;i++)
    &#123;
        printf(&quot;%d &quot;,Finish[i]);
    &#125;
    printf(&quot;\n***Log End***\n&quot;);
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="银行家算法主体"><a href="#银行家算法主体" class="headerlink" title="银行家算法主体"></a>银行家算法主体</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">void run()
&#123;
    while (!isAllFinish(Finish))
    &#123;
        printLog();
        printf(&quot;---------------------------------------\n输入资源申请(id A B C):\n&quot;);
        scanf(&quot;%d%d%d%d&quot;,&amp;Request.id,&amp;Request.res.A,&amp;Request.res.B,&amp;Request.res.C);
        if(cmpReqNeed()!&#x3D;ERR&amp;&amp;cmpReqAvailable()!&#x3D;ERR)
        &#123;
            if(preAllocate()!&#x3D;ERR)
            &#123;
                if(Need[Request.id].A&#x3D;&#x3D;0&amp;&amp;Need[Request.id].B&#x3D;&#x3D;0&amp;&amp;Need[Request.id].C&#x3D;&#x3D;0)
                &#123;
                    Available&#x3D;add(Available,Allocation[Request.id]);
                    Finish[Request.id]&#x3D;TRUE;
                &#125;
            &#125;
        &#125;
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>通过isAllFinish 函数判断是否所有进程已经完成，接收用户输入以模拟进程对资源的请求，通过cmpReqNeed 和cmpReqAvailable 检测请求是否超出，如果不超出，使用 preAllocate 进行预分配，如果预分配安全且执行完成，释放资源。</p>
<h3 id="预分配"><a href="#预分配" class="headerlink" title="预分配"></a>预分配</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">int preAllocate()
&#123;
    RES tempAvailable&#x3D;Available,tempAllocation&#x3D;Allocation[Request.id],tempNeed&#x3D;Need[Request.id];
    Available&#x3D;minus(Available,Request.res);
    Allocation[Request.id]&#x3D;add(Allocation[Request.id],Request.res);
    Need[Request.id]&#x3D;minus(Need[Request.id],Request.res);
    if(safeCheck()&#x3D;&#x3D;ERR)
    &#123;
        Available&#x3D;tempAvailable;
        Allocation[Request.id]&#x3D;tempAllocation;
        Need[Request.id]&#x3D;tempNeed;
        return ERR;
    &#125;
    return SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>首先使用temp开头的几个变量将原始资源余量等信息暂存，然后试着去分配，调用safeCheck检测安全性，如果不安全，则撤销预分配。</p>
<h3 id="安全性检测"><a href="#安全性检测" class="headerlink" title="安全性检测"></a>安全性检测</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">int safeCheck()
&#123;
    int tempFinish[N];
    int safeList[N],safeNum&#x3D;0;
    int flag;
    for(int i&#x3D;0;i&lt;N;i++)
    &#123;
        tempFinish[i]&#x3D;Finish[i];
    &#125;
    Work&#x3D;Available;
    while (isAllFinish(tempFinish)!&#x3D;TRUE)
    &#123;
        flag&#x3D;FALSE;
        for(int i&#x3D;0;i&lt;N;i++)
        &#123;
            if(tempFinish[i]&#x3D;&#x3D;FALSE&amp;&amp;isASmallerB(Need[i],Work))
            &#123;
                Work&#x3D;add(Work,Allocation[i]);
                tempFinish[i]&#x3D;TRUE;
                safeList[safeNum++]&#x3D;i;
                flag&#x3D;TRUE;
            &#125;
        &#125;
    &#125;
    if(flag&#x3D;&#x3D;FALSE)
    &#123;
        printf(&quot;不安全\n&quot;);
        return ERR;
    &#125;
    else
    &#123;
        printf(&quot;安全序列:\n&quot;);
        for(int i&#x3D;0;i&lt;safeNum;i++)
        &#123;
            printf(&quot;线程%d &quot;,safeList[i]);
        &#125;
        printf(&quot;\n&quot;);
        return SUCCESS;
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>循环查找资源能否有满足的线程，直到找不到或所有线程执行完毕。如果是安全的，输出安全序列。</p>
<h2 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h2><p>略</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>课程作业</category>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>实验</tag>
        <tag>银行家算法</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构实验1--线性表</title>
    <url>/posts/e6fc5c45/</url>
    <content><![CDATA[<blockquote>
<p>本系列文章广泛借鉴了各种教材和博客文章，由于完成时间比较久远，如果有遗漏标注的请联系我补充或删除解答。本文中解答仅供参考学习。</p>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>数据结构是我大二（2018-2019学年第二学期）的一门课，本文和后续文章将把课程里的约30道实验题补全到博客。</p>
<h2 id="员工储存"><a href="#员工储存" class="headerlink" title="员工储存"></a>员工储存</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>​    某软件公司大约有30名员工，每名员工有姓名、工号、职务等属性，每年都有员工离职和入职。</p>
<p>​    把所有员工按照顺序存储结构建立一个线性表，建立离职和入职函数，当有员工离职或入职时，修改线性表，并且打印最新的员工名单。</p>
<h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span>
<span class="token macro property">#<span class="token directive keyword">define</span> MEMBER_NUMBER 30</span>

<span class="token keyword">int</span> maxid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">member</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> id<span class="token punctuation">;</span>
	<span class="token keyword">char</span> job<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>Member<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">company</span> <span class="token punctuation">&#123;</span>
	Member<span class="token operator">*</span> member<span class="token punctuation">;</span>
	<span class="token keyword">int</span> length<span class="token punctuation">;</span>
	<span class="token keyword">int</span> last<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>Company<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">printMembers</span><span class="token punctuation">(</span>Company<span class="token operator">*</span> company<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> company<span class="token operator">-></span>last<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s,%d,%s\n"</span><span class="token punctuation">,</span> company<span class="token operator">-></span>member<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> company<span class="token operator">-></span>member<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span> company<span class="token operator">-></span>member<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>job<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*************************************\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">initCompany</span><span class="token punctuation">(</span>Company<span class="token operator">*</span> company<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	company<span class="token operator">-></span>member <span class="token operator">=</span> <span class="token punctuation">(</span>Member<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>MEMBER_NUMBER <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Member<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	company<span class="token operator">-></span>length <span class="token operator">=</span> MEMBER_NUMBER<span class="token punctuation">;</span>
	company<span class="token operator">-></span>last <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">joinCompany</span><span class="token punctuation">(</span>Company<span class="token operator">*</span> company<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> name<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> job<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>company<span class="token operator">-></span>last <span class="token operator">>=</span> company<span class="token operator">-></span>length<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"full"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">else</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">strcpy</span><span class="token punctuation">(</span>company<span class="token operator">-></span>member<span class="token punctuation">[</span>company<span class="token operator">-></span>last<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
		company<span class="token operator">-></span>member<span class="token punctuation">[</span>company<span class="token operator">-></span>last<span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">=</span> maxid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token function">strcpy</span><span class="token punctuation">(</span>company<span class="token operator">-></span>member<span class="token punctuation">[</span>company<span class="token operator">-></span>last<span class="token punctuation">]</span><span class="token punctuation">.</span>job<span class="token punctuation">,</span> job<span class="token punctuation">)</span><span class="token punctuation">;</span>
		company<span class="token operator">-></span>last <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
		maxid <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token function">printMembers</span><span class="token punctuation">(</span>company<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">leaveCompany</span><span class="token punctuation">(</span>Company<span class="token operator">*</span> company<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>company<span class="token operator">-></span>last <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"empty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">else</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> company<span class="token operator">-></span>last<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>company<span class="token operator">-></span>member<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">==</span> id<span class="token punctuation">)</span>
			<span class="token punctuation">&#123;</span>
				<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> company<span class="token operator">-></span>last<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
				<span class="token punctuation">&#123;</span>
					company<span class="token operator">-></span>member<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> company<span class="token operator">-></span>member<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
				<span class="token punctuation">&#125;</span>
				company<span class="token operator">-></span>last <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>
				<span class="token function">printMembers</span><span class="token punctuation">(</span>company<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"not found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	Company company<span class="token punctuation">;</span>
	<span class="token keyword">char</span> joinname<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> joinjob<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> leaveid<span class="token punctuation">;</span>
	<span class="token keyword">int</span> choose<span class="token punctuation">;</span>
	<span class="token function">initCompany</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>company<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请选择：\n1.入职\n2.离职\n3.退出程序\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>choose<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">switch</span> <span class="token punctuation">(</span>choose<span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
		<span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入姓名：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>joinname<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入职位：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>joinjob<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">joinCompany</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>company<span class="token punctuation">,</span> joinname<span class="token punctuation">,</span> joinjob<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入离职id：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>leaveid<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">leaveCompany</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>company<span class="token punctuation">,</span> leaveid<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>
			<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">default</span><span class="token operator">:</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="/posts/e6fc5c45/1.png" alt="res1"></p>
<h2 id="约瑟夫环"><a href="#约瑟夫环" class="headerlink" title="约瑟夫环"></a>约瑟夫环</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>​    约瑟夫（Josephus）环问题：编号为1,2,3,…,n的n个人按顺时针方向围坐一圈，每人持有一个密码（正整数）。一开始任选一个正整数作为报数的上限值m，从第一个人开始按顺时针方向自1开始顺序报数,报到m时停止。报m的人出列，将他的密码作为新的m值，从他在顺时针方向上的下一人开始重新从1报数，如此下去，直到所有人全部出列为止。</p>
<p>​    建立n个人的单循环链表存储结构，运行结束后，输出依次出队的人的序号。</p>
<h3 id="解答-1"><a href="#解答-1" class="headerlink" title="解答"></a>解答</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;time.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property">#<span class="token directive keyword">define</span> N 30</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> num<span class="token punctuation">;</span>
	<span class="token keyword">int</span> pass<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token operator">*</span> next<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>Node<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">randNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> max<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> max <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token function">randNumber</span><span class="token punctuation">(</span>N <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Node<span class="token operator">*</span> <span class="token function">initList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Node<span class="token operator">*</span> head <span class="token operator">=</span> <span class="token punctuation">(</span>Node<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	head<span class="token operator">-></span>num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	head<span class="token operator">-></span>pass <span class="token operator">=</span> <span class="token function">randNumber</span><span class="token punctuation">(</span>N <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Node<span class="token operator">*</span> temp <span class="token operator">=</span> head<span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		Node<span class="token operator">*</span> p <span class="token operator">=</span> <span class="token punctuation">(</span>Node<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		p<span class="token operator">-></span>num <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
		p<span class="token operator">-></span>pass <span class="token operator">=</span> <span class="token function">randNumber</span><span class="token punctuation">(</span>N <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		temp<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>
		temp <span class="token operator">=</span> temp<span class="token operator">-></span>next<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	temp<span class="token operator">-></span>next <span class="token operator">=</span> head<span class="token punctuation">;</span> <span class="token comment">//末尾指向头部，构成单循环链表</span>
	<span class="token keyword">return</span> head<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">playGame</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> head<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	Node<span class="token operator">*</span> temp1 <span class="token operator">=</span> head<span class="token punctuation">,</span> <span class="token operator">*</span> temp2<span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> head<span class="token operator">-></span>next<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//删除头结点</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">while</span> <span class="token punctuation">(</span>temp1<span class="token operator">-></span>next <span class="token operator">!=</span> head<span class="token punctuation">)</span>
			<span class="token punctuation">&#123;</span>
				temp1 <span class="token operator">=</span> temp1<span class="token operator">-></span>next<span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
			temp2 <span class="token operator">=</span> head<span class="token punctuation">;</span>
			temp1<span class="token operator">-></span>next <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>
			head <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>
			m <span class="token operator">=</span> temp2<span class="token operator">-></span>pass<span class="token punctuation">;</span>
			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"delete id:%d\n"</span><span class="token punctuation">,</span> temp2<span class="token operator">-></span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">free</span><span class="token punctuation">(</span>temp2<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token comment">//printList(head);</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">else</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
			<span class="token punctuation">&#123;</span>
				temp1 <span class="token operator">=</span> temp1<span class="token operator">-></span>next<span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
			temp2 <span class="token operator">=</span> temp1<span class="token operator">-></span>next<span class="token punctuation">;</span>
			temp1<span class="token operator">-></span>next <span class="token operator">=</span> temp2<span class="token operator">-></span>next<span class="token punctuation">;</span>
			m <span class="token operator">=</span> temp2<span class="token operator">-></span>pass<span class="token punctuation">;</span>
			head <span class="token operator">=</span> temp1<span class="token operator">-></span>next<span class="token punctuation">;</span>
			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"delete id:%d\n"</span><span class="token punctuation">,</span> temp2<span class="token operator">-></span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">free</span><span class="token punctuation">(</span>temp2<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token comment">//printList(head);</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Number m=%d\n"</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>
	Node<span class="token operator">*</span> head <span class="token operator">=</span> <span class="token function">initList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//printList(head);</span>
	<span class="token function">playGame</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="/posts/e6fc5c45/2.png" alt="res2"></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>课程作业</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>实验</tag>
        <tag>线性表</tag>
        <tag>约瑟夫环</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构实验2--栈和队列</title>
    <url>/posts/959bb1f8/</url>
    <content><![CDATA[<blockquote>
<p>本系列文章广泛借鉴了各种教材和博客文章，由于完成时间比较久远，如果有遗漏标注的请联系我补充或删除解答。本文中解答仅供参考学习。</p>
</blockquote>
<h2 id="商场停车场"><a href="#商场停车场" class="headerlink" title="商场停车场"></a>商场停车场</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>​    某商场有一个100个车位的停车场，当车位未满时，等待的车辆可以进入并计时；当车位已满时，必须有车辆离开，等待的车辆才能进入；当车辆离开时计算停留的的时间，并且按照每小时1元收费。</p>
<p>​    汽车的输入信息格式可以是（进入/离开，车牌号，进入/离开时间），要求可以随时显示停车场内的车辆信息以及收费历史记录。</p>
<h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;time.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span>

<span class="token macro property">#<span class="token directive keyword">define</span> MAXSPACE 100</span>
<span class="token macro property">#<span class="token directive keyword">define</span> PRICEPERSECOND 1</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">vehicle</span> <span class="token comment">//车辆信息</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> carNumber<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//车牌号码</span>
	time_t parkTime<span class="token punctuation">;</span> <span class="token comment">//停车时间</span>
<span class="token punctuation">&#125;</span>Vehicle<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">space</span> <span class="token comment">//车位信息</span>
<span class="token punctuation">&#123;</span>
	Vehicle carInfo<span class="token punctuation">;</span> <span class="token comment">//车位里停的车</span>
	<span class="token keyword">int</span> isParked<span class="token punctuation">;</span> <span class="token comment">//车位状态</span>
<span class="token punctuation">&#125;</span>Space<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">lot</span> <span class="token comment">//停车场信息</span>
<span class="token punctuation">&#123;</span>
	Space<span class="token operator">*</span> allSpace<span class="token punctuation">;</span>  <span class="token comment">//所有车位</span>
	<span class="token keyword">int</span> emptySpace<span class="token punctuation">;</span>  <span class="token comment">//剩余车位数</span>
<span class="token punctuation">&#125;</span> Lot<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">history</span> <span class="token comment">//收费记录</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> carNumber<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	time_t parkTime<span class="token punctuation">;</span>
	time_t leaveTime<span class="token punctuation">;</span>
	<span class="token keyword">int</span> price<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">history</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>History<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">printLot</span><span class="token punctuation">(</span>Lot parkingLot<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"=================================================\n现在时间：%lld\n停车场剩余空位%d个\n"</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">,</span> parkingLot<span class="token punctuation">.</span>emptySpace<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MAXSPACE<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>parkingLot<span class="token punctuation">.</span>allSpace<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>isParked <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"---------------------\n车牌：%s\n停车时间：%lld\n"</span><span class="token punctuation">,</span> parkingLot<span class="token punctuation">.</span>allSpace<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>carInfo<span class="token punctuation">.</span>carNumber<span class="token punctuation">,</span> parkingLot<span class="token punctuation">.</span>allSpace<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>carInfo<span class="token punctuation">.</span>parkTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"---------------------\n=================================================\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">printHistory</span><span class="token punctuation">(</span>History <span class="token operator">*</span>head<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	History <span class="token operator">*</span>temp <span class="token operator">=</span> head<span class="token punctuation">;</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token operator">-></span>price <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"第%d笔，车牌号：%s，收费：%d元\n"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> temp<span class="token operator">-></span>carNumber<span class="token punctuation">,</span> temp<span class="token operator">-></span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>temp<span class="token operator">-></span>next<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			temp <span class="token operator">=</span> temp<span class="token operator">-></span>next<span class="token punctuation">;</span>
			i<span class="token operator">++</span><span class="token punctuation">;</span>
			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"第%d笔，车牌号：%s，收费：%d元\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> temp<span class="token operator">-></span>carNumber<span class="token punctuation">,</span> temp<span class="token operator">-></span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

Lot <span class="token function">parkVehicle</span><span class="token punctuation">(</span>Lot parkingLot<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>parkingLot<span class="token punctuation">.</span>emptySpace <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"车位满，请离开"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> parkingLot<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MAXSPACE<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>parkingLot<span class="token punctuation">.</span>allSpace<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>isParked <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">//找到空车位</span>
		<span class="token punctuation">&#123;</span>
			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入7位车牌号（例：JA10086）：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> parkingLot<span class="token punctuation">.</span>allSpace<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>carInfo<span class="token punctuation">.</span>carNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>
			parkingLot<span class="token punctuation">.</span>allSpace<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>carInfo<span class="token punctuation">.</span>parkTime<span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			parkingLot<span class="token punctuation">.</span>allSpace<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>isParked <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
			parkingLot<span class="token punctuation">.</span>emptySpace<span class="token operator">--</span><span class="token punctuation">;</span>
			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"现在时间%lld,%s停车成功\n"</span><span class="token punctuation">,</span> parkingLot<span class="token punctuation">.</span>allSpace<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>carInfo<span class="token punctuation">.</span>parkTime<span class="token punctuation">,</span>parkingLot<span class="token punctuation">.</span>allSpace<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>carInfo<span class="token punctuation">.</span>carNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span> parkingLot<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

Lot <span class="token function">leaveVehicle</span><span class="token punctuation">(</span>Lot parkingLot<span class="token punctuation">,</span> History<span class="token operator">*</span> head<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>parkingLot<span class="token punctuation">.</span>emptySpace <span class="token operator">==</span> MAXSPACE<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"停车场空\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> parkingLot<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">char</span> carNumber<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	time_t nowTime<span class="token punctuation">;</span>
	<span class="token keyword">int</span> parkingFee<span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入7位车牌号（例：JA10086）：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> carNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MAXSPACE<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>parkingLot<span class="token punctuation">.</span>allSpace<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>carInfo<span class="token punctuation">.</span>carNumber<span class="token punctuation">,</span>carNumber<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			parkingLot<span class="token punctuation">.</span>allSpace<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>isParked <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
			parkingLot<span class="token punctuation">.</span>emptySpace<span class="token operator">++</span><span class="token punctuation">;</span>
			nowTime <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			parkingFee <span class="token operator">=</span> PRICEPERSECOND <span class="token operator">*</span> <span class="token punctuation">(</span>nowTime <span class="token operator">-</span> parkingLot<span class="token punctuation">.</span>allSpace<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>carInfo<span class="token punctuation">.</span>parkTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s离开成功，收费%d元\n"</span><span class="token punctuation">,</span> parkingLot<span class="token punctuation">.</span>allSpace<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>carInfo<span class="token punctuation">.</span>carNumber<span class="token punctuation">,</span> parkingFee<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token comment">//储存收费记录</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token operator">-></span>price <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
			<span class="token punctuation">&#123;</span>
				<span class="token function">strcpy</span><span class="token punctuation">(</span>head<span class="token operator">-></span>carNumber<span class="token punctuation">,</span> parkingLot<span class="token punctuation">.</span>allSpace<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>carInfo<span class="token punctuation">.</span>carNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>
				head<span class="token operator">-></span>parkTime <span class="token operator">=</span> parkingLot<span class="token punctuation">.</span>allSpace<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>carInfo<span class="token punctuation">.</span>parkTime<span class="token punctuation">;</span>
				head<span class="token operator">-></span>leaveTime <span class="token operator">=</span> nowTime<span class="token punctuation">;</span>
				head<span class="token operator">-></span>price <span class="token operator">=</span> parkingFee<span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
			<span class="token keyword">else</span>
			<span class="token punctuation">&#123;</span>
				History <span class="token operator">*</span>temp <span class="token operator">=</span> head<span class="token punctuation">;</span>
				<span class="token keyword">while</span> <span class="token punctuation">(</span>temp<span class="token operator">-></span>next<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>
				<span class="token punctuation">&#123;</span>
					temp <span class="token operator">=</span> temp<span class="token operator">-></span>next<span class="token punctuation">;</span>
				<span class="token punctuation">&#125;</span>
				temp<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token punctuation">(</span>History<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>History<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				temp <span class="token operator">=</span> temp<span class="token operator">-></span>next<span class="token punctuation">;</span>
				<span class="token function">strcpy</span><span class="token punctuation">(</span>temp<span class="token operator">-></span>carNumber<span class="token punctuation">,</span> parkingLot<span class="token punctuation">.</span>allSpace<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>carInfo<span class="token punctuation">.</span>carNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>
				temp<span class="token operator">-></span>parkTime <span class="token operator">=</span> parkingLot<span class="token punctuation">.</span>allSpace<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>carInfo<span class="token punctuation">.</span>parkTime<span class="token punctuation">;</span>
				temp<span class="token operator">-></span>leaveTime <span class="token operator">=</span> nowTime<span class="token punctuation">;</span>
				temp<span class="token operator">-></span>price <span class="token operator">=</span> parkingFee<span class="token punctuation">;</span>
				temp<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
			<span class="token keyword">return</span> parkingLot<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">startSystem</span><span class="token punctuation">(</span>Lot parkingLot<span class="token punctuation">,</span> History<span class="token operator">*</span> head<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> i<span class="token punctuation">;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1.停车\n2.离开\n3.打印停车场状态\n4.打印收费历史\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">switch</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
		<span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
			parkingLot <span class="token operator">=</span> <span class="token function">parkVehicle</span><span class="token punctuation">(</span>parkingLot<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
			parkingLot <span class="token operator">=</span> <span class="token function">leaveVehicle</span><span class="token punctuation">(</span>parkingLot<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>
			<span class="token function">printLot</span><span class="token punctuation">(</span>parkingLot<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>
			<span class="token function">printHistory</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token keyword">default</span><span class="token operator">:</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	Lot parkingLot<span class="token punctuation">;</span>
	parkingLot<span class="token punctuation">.</span>allSpace <span class="token operator">=</span> <span class="token punctuation">(</span>Space<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>MAXSPACE <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Space<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	parkingLot<span class="token punctuation">.</span>emptySpace <span class="token operator">=</span> MAXSPACE<span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MAXSPACE<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		parkingLot<span class="token punctuation">.</span>allSpace<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>isParked <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	History<span class="token operator">*</span> head <span class="token operator">=</span> <span class="token punctuation">(</span>History<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>History<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	head<span class="token operator">-></span>price <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	head<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token function">startSystem</span><span class="token punctuation">(</span>parkingLot<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="/posts/959bb1f8/1-1.png"></p>
<p><img src="/posts/959bb1f8/1-2.png"></p>
<h2 id="银行营业厅"><a href="#银行营业厅" class="headerlink" title="银行营业厅"></a>银行营业厅</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>​    某银行营业厅共有6个营业窗口，设有排队系统广播叫号，该银行的业务分为公积金、银行卡、理财卡等三种。公积金业务指定1号窗口，银行卡业务指定2、3、4号窗口，理财卡业务指定5、6号窗口。但如果5、6号窗口全忙，而2、3、4号窗口有空闲时，理财卡业务也可以在空闲的2、3、4号窗口之一办理。</p>
<p>​    客户领号、业务完成可以作为输入信息，要求可以随时显示6个营业窗口的状态。</p>
<h3 id="解答-1"><a href="#解答-1" class="headerlink" title="解答"></a>解答</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">int</span> windows<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//顾客领取的号码</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">QNode</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> data<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">QNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>QNode<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">LinkQueue</span>
<span class="token punctuation">&#123;</span>
	QNode <span class="token operator">*</span>front<span class="token punctuation">;</span>
	QNode <span class="token operator">*</span>rear<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>LinkQueue<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">initQueue</span><span class="token punctuation">(</span>LinkQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	Q<span class="token punctuation">.</span>front <span class="token operator">=</span> Q<span class="token punctuation">.</span>rear <span class="token operator">=</span> <span class="token punctuation">(</span>QNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>QNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Q<span class="token punctuation">.</span>front<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	Q<span class="token punctuation">.</span>front<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">enQueue</span><span class="token punctuation">(</span>LinkQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">,</span> <span class="token keyword">int</span> data<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	QNode <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token punctuation">(</span>QNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>QNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	p<span class="token operator">-></span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>
	p<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	Q<span class="token punctuation">.</span>rear<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>
	Q<span class="token punctuation">.</span>rear <span class="token operator">=</span> p<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">deQueue</span><span class="token punctuation">(</span>LinkQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>data<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>Q<span class="token punctuation">.</span>front <span class="token operator">==</span> Q<span class="token punctuation">.</span>rear<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	QNode <span class="token operator">*</span>p <span class="token operator">=</span> Q<span class="token punctuation">.</span>front<span class="token operator">-></span>next<span class="token punctuation">;</span>
	data <span class="token operator">=</span> p<span class="token operator">-></span>data<span class="token punctuation">;</span>
	Q<span class="token punctuation">.</span>front<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> Q<span class="token punctuation">.</span>rear<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		Q<span class="token punctuation">.</span>rear <span class="token operator">=</span> Q<span class="token punctuation">.</span>front<span class="token punctuation">;</span>
		<span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>LinkQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>Q<span class="token punctuation">.</span>front <span class="token operator">==</span> Q<span class="token punctuation">.</span>rear<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>LinkQueue <span class="token operator">*</span>Q<span class="token punctuation">)</span>   <span class="token comment">//输出队列中的元素</span>
<span class="token punctuation">&#123;</span>
	QNode <span class="token operator">*</span>p<span class="token punctuation">;</span>
	p <span class="token operator">=</span> Q<span class="token operator">-></span>front<span class="token operator">-></span>next<span class="token punctuation">;</span> <span class="token comment">//p结点指向链队列中存放第一个元素的结点</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span>  <span class="token comment">//沿链队列从队头到队尾的方向依次输出元素的值</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d  "</span><span class="token punctuation">,</span> p<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
		p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">entryBank</span><span class="token punctuation">(</span>LinkQueue <span class="token operator">&amp;</span>gjj<span class="token punctuation">,</span> LinkQueue <span class="token operator">&amp;</span>yhk<span class="token punctuation">,</span> LinkQueue <span class="token operator">&amp;</span>lck<span class="token punctuation">,</span> LinkQueue <span class="token operator">&amp;</span>customer1<span class="token punctuation">,</span> LinkQueue <span class="token operator">&amp;</span>customer2<span class="token punctuation">,</span> LinkQueue <span class="token operator">&amp;</span>customer3<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> i<span class="token punctuation">,</span>data<span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入要办理的业务：\n1.公积金\n2.银行卡\n3.理财卡\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
	number<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token keyword">switch</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
	<span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>gjj<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token function">deQueue</span><span class="token punctuation">(</span>gjj<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
			windows<span class="token punctuation">[</span>data<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d号顾客到%d号柜台办理\n"</span><span class="token punctuation">,</span> number<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">else</span>
		<span class="token punctuation">&#123;</span>
			<span class="token function">enQueue</span><span class="token punctuation">(</span>customer1<span class="token punctuation">,</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d号顾客到队列1等待\n"</span><span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>yhk<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token function">deQueue</span><span class="token punctuation">(</span>yhk<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
			windows<span class="token punctuation">[</span>data<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d号顾客到%d号柜台办理\n"</span><span class="token punctuation">,</span> number<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">else</span>
		<span class="token punctuation">&#123;</span>
			<span class="token function">enQueue</span><span class="token punctuation">(</span>customer2<span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d号顾客到队列2等待\n"</span><span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>lck<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token function">deQueue</span><span class="token punctuation">(</span>lck<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
			windows<span class="token punctuation">[</span>data<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d号顾客到%d号柜台办理\n"</span><span class="token punctuation">,</span> number<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>yhk<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token function">deQueue</span><span class="token punctuation">(</span>yhk<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
			windows<span class="token punctuation">[</span>data<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d号顾客到%d号柜台办理\n"</span><span class="token punctuation">,</span> number<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">else</span>
		<span class="token punctuation">&#123;</span>
			<span class="token function">enQueue</span><span class="token punctuation">(</span>customer3<span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d号顾客到队列3等待\n"</span><span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token keyword">default</span><span class="token operator">:</span>
		<span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">leaveBank</span><span class="token punctuation">(</span>LinkQueue <span class="token operator">&amp;</span>gjj<span class="token punctuation">,</span> LinkQueue <span class="token operator">&amp;</span>yhk<span class="token punctuation">,</span> LinkQueue <span class="token operator">&amp;</span>lck<span class="token punctuation">,</span> LinkQueue <span class="token operator">&amp;</span>customer1<span class="token punctuation">,</span> LinkQueue <span class="token operator">&amp;</span>customer2<span class="token punctuation">,</span> LinkQueue <span class="token operator">&amp;</span>customer3<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> i<span class="token punctuation">,</span>number<span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入办理完成的窗口（1-6）\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">switch</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
	<span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>customer1<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token function">deQueue</span><span class="token punctuation">(</span>customer1<span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d号顾客到%d号柜台办理\n"</span><span class="token punctuation">,</span> number<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">else</span>
		<span class="token punctuation">&#123;</span>
			<span class="token function">enQueue</span><span class="token punctuation">(</span>gjj<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
			windows<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
	<span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>
	<span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>customer2<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token function">deQueue</span><span class="token punctuation">(</span>customer2<span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d号顾客到%d号柜台办理\n"</span><span class="token punctuation">,</span> number<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>customer3<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token function">deQueue</span><span class="token punctuation">(</span>customer3<span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d号顾客到%d号柜台办理\n"</span><span class="token punctuation">,</span> number<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">else</span>
		<span class="token punctuation">&#123;</span>
			<span class="token function">enQueue</span><span class="token punctuation">(</span>yhk<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
			windows<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>
	<span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>customer3<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token function">deQueue</span><span class="token punctuation">(</span>customer3<span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d号顾客到%d号柜台办理\n"</span><span class="token punctuation">,</span> number<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">else</span>
		<span class="token punctuation">&#123;</span>
			<span class="token function">enQueue</span><span class="token punctuation">(</span>lck<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
			windows<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token keyword">default</span><span class="token operator">:</span>
		<span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">startSystem</span><span class="token punctuation">(</span>LinkQueue <span class="token operator">&amp;</span>gjj<span class="token punctuation">,</span> LinkQueue <span class="token operator">&amp;</span>yhk<span class="token punctuation">,</span> LinkQueue <span class="token operator">&amp;</span>lck<span class="token punctuation">,</span> LinkQueue <span class="token operator">&amp;</span>customer1<span class="token punctuation">,</span> LinkQueue <span class="token operator">&amp;</span>customer2<span class="token punctuation">,</span> LinkQueue <span class="token operator">&amp;</span>customer3<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> i<span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入顾客行为：\n1.进入\n2.离开\n3.查看窗口状态\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">switch</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
	<span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
		<span class="token function">entryBank</span><span class="token punctuation">(</span>gjj<span class="token punctuation">,</span> yhk<span class="token punctuation">,</span> lck<span class="token punctuation">,</span> customer1<span class="token punctuation">,</span> customer2<span class="token punctuation">,</span> customer3<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
		<span class="token function">leaveBank</span><span class="token punctuation">(</span>gjj<span class="token punctuation">,</span> yhk<span class="token punctuation">,</span> lck<span class="token punctuation">,</span> customer1<span class="token punctuation">,</span> customer2<span class="token punctuation">,</span> customer3<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			windows<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d号窗口有人\n"</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d号窗口无人\n"</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token keyword">default</span><span class="token operator">:</span>
		<span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	LinkQueue gjj<span class="token punctuation">,</span> yhk<span class="token punctuation">,</span> lck<span class="token punctuation">;</span> <span class="token comment">//窗口队列</span>
	LinkQueue customer1<span class="token punctuation">,</span> customer2<span class="token punctuation">,</span> customer3<span class="token punctuation">;</span> <span class="token comment">//顾客队列</span>
	<span class="token comment">//窗口队列初始化</span>
	<span class="token function">initQueue</span><span class="token punctuation">(</span>gjj<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">enQueue</span><span class="token punctuation">(</span>gjj<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">initQueue</span><span class="token punctuation">(</span>yhk<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">enQueue</span><span class="token punctuation">(</span>yhk<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">enQueue</span><span class="token punctuation">(</span>yhk<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">enQueue</span><span class="token punctuation">(</span>yhk<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">initQueue</span><span class="token punctuation">(</span>lck<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">enQueue</span><span class="token punctuation">(</span>lck<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">enQueue</span><span class="token punctuation">(</span>lck<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//窗口队列初始化完毕</span>
	<span class="token comment">//顾客队列初始化</span>
	<span class="token function">initQueue</span><span class="token punctuation">(</span>customer1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">initQueue</span><span class="token punctuation">(</span>customer2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">initQueue</span><span class="token punctuation">(</span>customer3<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//顾客队列初始化完毕</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">startSystem</span><span class="token punctuation">(</span>gjj<span class="token punctuation">,</span> yhk<span class="token punctuation">,</span> lck<span class="token punctuation">,</span> customer1<span class="token punctuation">,</span> customer2<span class="token punctuation">,</span> customer3<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="/posts/959bb1f8/2-1.png"></p>
<p><img src="/posts/959bb1f8/2-2.png"></p>
<h2 id="4阶斐波那契序列"><a href="#4阶斐波那契序列" class="headerlink" title="4阶斐波那契序列"></a>4阶斐波那契序列</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>​    4阶斐波那契序列如下：f0=f1=f2=0, f3=1,…,fi=fi-1+fi-2+fi-3+fi-4，</p>
<p>​    利用容量为k=4的循环队列，构造序列的前n+1项（f0, f1 , f2 ,… fn ），要求满足fn ≤200而fn+1 &gt;200。</p>
<h3 id="解答-2"><a href="#解答-2" class="headerlink" title="解答"></a>解答</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">define</span> kk 4</span>
<span class="token macro property">#<span class="token directive keyword">define</span> max 200</span>
<span class="token keyword">struct</span> <span class="token class-name">queue</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> elem<span class="token punctuation">[</span>kk<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> rear<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>cq<span class="token punctuation">;</span>
<span class="token keyword">int</span> f<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">fb</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> k <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
	<span class="token punctuation">&#123;</span> 
		f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> cq<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 
	<span class="token punctuation">&#125;</span>       
	cq<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//为第k个元素赋值，并放入队列cq</span>
	cq<span class="token punctuation">.</span>rear <span class="token operator">=</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>   
	n <span class="token operator">=</span> k<span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>cq<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>cq<span class="token punctuation">.</span>rear<span class="token punctuation">]</span> <span class="token operator">&lt;</span> max<span class="token punctuation">)</span>    <span class="token comment">//利用循环队列依次求f[n]</span>
	<span class="token punctuation">&#123;</span>
		f<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			f<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">+</span> cq<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		cq<span class="token punctuation">.</span>rear <span class="token operator">=</span> <span class="token punctuation">(</span>cq<span class="token punctuation">.</span>rear <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> k<span class="token punctuation">;</span>
		cq<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>cq<span class="token punctuation">.</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
		n<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>                       <span class="token comment">//利用循环队列依次求f[n]</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>cq<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>cq<span class="token punctuation">.</span>rear<span class="token punctuation">]</span> <span class="token operator">></span> max<span class="token punctuation">)</span>  
		n <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> 
	<span class="token keyword">else</span> 
		n <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> i<span class="token punctuation">;</span>
	<span class="token function">fb</span><span class="token punctuation">(</span>kk<span class="token punctuation">)</span><span class="token punctuation">;</span>   
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>   
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"  %d  "</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="运行结果-2"><a href="#运行结果-2" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="/posts/959bb1f8/3.png"></p>
<h2 id="八皇后问题"><a href="#八皇后问题" class="headerlink" title="八皇后问题"></a>八皇后问题</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>八皇后问题：设8皇后问题的解为 (x1, x2, x3, …,x8), 约束条件为：在8x8的棋盘上，其中任意两个xi 和xj不能位于棋盘的同行、同列及同对角线。要求用一位数组进行存储，输出所有可能的排列。</p>
<h3 id="解答-3"><a href="#解答-3" class="headerlink" title="解答"></a>解答</h3><pre class="line-numbers language-none"><code class="language-none">#include&lt;stdio.h&gt;
#include&lt;math.h&gt;
#define N 8
int count &#x3D; 0, position[N];
int isLegal(int i, int j)  &#x2F;&#x2F;检查(i,j)上能否放棋子
&#123;
	int j1 &#x3D; j,i1 &#x3D; i,ok1 &#x3D; 1;  &#x2F;&#x2F;检查第i行上能否放棋子
	while ((j1 &gt; 1) &amp;&amp; ok1)
	&#123;
		j1--;         
		ok1 &#x3D; position[j1] !&#x3D; i;
	&#125;
	j1 &#x3D; j; 
	i1 &#x3D; i;    &#x2F;&#x2F;检查对角线上能否放棋子
	while ((j1 &gt; 1) &amp;&amp; (i1 &gt; 1) &amp;&amp; ok1)
	&#123;
		j1--; 
		i1--; 
		ok1 &#x3D; position[j1] !&#x3D; i1;
	&#125;
	j1 &#x3D; j; 
	i1 &#x3D; i;     &#x2F;&#x2F;检查另一对角线上能否放棋子
	while ((j1 &gt; 1) &amp;&amp; (i1 &lt; N) &amp;&amp; ok1)
	&#123;
		j1--; 
		i1++; 
		ok1 &#x3D; position[j1] !&#x3D; i1;
	&#125;
	return  ok1;
&#125;
int queen(int j) &#x2F;&#x2F;从第j列开始逐个试探
&#123;
	if (j &gt; N)
	&#123;
		count++;  
		printf(&quot;count&#x3D;%d   &quot;, count);
		for (int i &#x3D; 1; i &lt;&#x3D; N; i++)  
			printf(&quot;    %d&quot;, position[i]);
		printf(&quot;\n&quot;);
	&#125;
	else  
		for (int i &#x3D; 1; i &lt;&#x3D; N; i++)
		if (isLegal(i,j))    &#x2F;&#x2F;检查(i,j)上能否放棋子
		&#123;
			position[j] &#x3D; i;  &#x2F;&#x2F;在(i,j)上放一个棋子
			queen(j + 1);
		&#125;
	return 0;
&#125;
int main()
&#123;
	queen(1);
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="运行结果-3"><a href="#运行结果-3" class="headerlink" title="运行结果"></a>运行结果</h3><p>一共92种，比较多，就不截图了</p>
<pre class="line-numbers language-none"><code class="language-none">count&#x3D;1       1    5    8    6    3    7    2    4
count&#x3D;2       1    6    8    3    7    4    2    5
count&#x3D;3       1    7    4    6    8    2    5    3
count&#x3D;4       1    7    5    8    2    4    6    3
count&#x3D;5       2    4    6    8    3    1    7    5
count&#x3D;6       2    5    7    1    3    8    6    4
count&#x3D;7       2    5    7    4    1    8    6    3
count&#x3D;8       2    6    1    7    4    8    3    5
count&#x3D;9       2    6    8    3    1    4    7    5
count&#x3D;10       2    7    3    6    8    5    1    4
count&#x3D;11       2    7    5    8    1    4    6    3
count&#x3D;12       2    8    6    1    3    5    7    4
count&#x3D;13       3    1    7    5    8    2    4    6
count&#x3D;14       3    5    2    8    1    7    4    6
count&#x3D;15       3    5    2    8    6    4    7    1
count&#x3D;16       3    5    7    1    4    2    8    6
count&#x3D;17       3    5    8    4    1    7    2    6
count&#x3D;18       3    6    2    5    8    1    7    4
count&#x3D;19       3    6    2    7    1    4    8    5
count&#x3D;20       3    6    2    7    5    1    8    4
count&#x3D;21       3    6    4    1    8    5    7    2
count&#x3D;22       3    6    4    2    8    5    7    1
count&#x3D;23       3    6    8    1    4    7    5    2
count&#x3D;24       3    6    8    1    5    7    2    4
count&#x3D;25       3    6    8    2    4    1    7    5
count&#x3D;26       3    7    2    8    5    1    4    6
count&#x3D;27       3    7    2    8    6    4    1    5
count&#x3D;28       3    8    4    7    1    6    2    5
count&#x3D;29       4    1    5    8    2    7    3    6
count&#x3D;30       4    1    5    8    6    3    7    2
count&#x3D;31       4    2    5    8    6    1    3    7
count&#x3D;32       4    2    7    3    6    8    1    5
count&#x3D;33       4    2    7    3    6    8    5    1
count&#x3D;34       4    2    7    5    1    8    6    3
count&#x3D;35       4    2    8    5    7    1    3    6
count&#x3D;36       4    2    8    6    1    3    5    7
count&#x3D;37       4    6    1    5    2    8    3    7
count&#x3D;38       4    6    8    2    7    1    3    5
count&#x3D;39       4    6    8    3    1    7    5    2
count&#x3D;40       4    7    1    8    5    2    6    3
count&#x3D;41       4    7    3    8    2    5    1    6
count&#x3D;42       4    7    5    2    6    1    3    8
count&#x3D;43       4    7    5    3    1    6    8    2
count&#x3D;44       4    8    1    3    6    2    7    5
count&#x3D;45       4    8    1    5    7    2    6    3
count&#x3D;46       4    8    5    3    1    7    2    6
count&#x3D;47       5    1    4    6    8    2    7    3
count&#x3D;48       5    1    8    4    2    7    3    6
count&#x3D;49       5    1    8    6    3    7    2    4
count&#x3D;50       5    2    4    6    8    3    1    7
count&#x3D;51       5    2    4    7    3    8    6    1
count&#x3D;52       5    2    6    1    7    4    8    3
count&#x3D;53       5    2    8    1    4    7    3    6
count&#x3D;54       5    3    1    6    8    2    4    7
count&#x3D;55       5    3    1    7    2    8    6    4
count&#x3D;56       5    3    8    4    7    1    6    2
count&#x3D;57       5    7    1    3    8    6    4    2
count&#x3D;58       5    7    1    4    2    8    6    3
count&#x3D;59       5    7    2    4    8    1    3    6
count&#x3D;60       5    7    2    6    3    1    4    8
count&#x3D;61       5    7    2    6    3    1    8    4
count&#x3D;62       5    7    4    1    3    8    6    2
count&#x3D;63       5    8    4    1    3    6    2    7
count&#x3D;64       5    8    4    1    7    2    6    3
count&#x3D;65       6    1    5    2    8    3    7    4
count&#x3D;66       6    2    7    1    3    5    8    4
count&#x3D;67       6    2    7    1    4    8    5    3
count&#x3D;68       6    3    1    7    5    8    2    4
count&#x3D;69       6    3    1    8    4    2    7    5
count&#x3D;70       6    3    1    8    5    2    4    7
count&#x3D;71       6    3    5    7    1    4    2    8
count&#x3D;72       6    3    5    8    1    4    2    7
count&#x3D;73       6    3    7    2    4    8    1    5
count&#x3D;74       6    3    7    2    8    5    1    4
count&#x3D;75       6    3    7    4    1    8    2    5
count&#x3D;76       6    4    1    5    8    2    7    3
count&#x3D;77       6    4    2    8    5    7    1    3
count&#x3D;78       6    4    7    1    3    5    2    8
count&#x3D;79       6    4    7    1    8    2    5    3
count&#x3D;80       6    8    2    4    1    7    5    3
count&#x3D;81       7    1    3    8    6    4    2    5
count&#x3D;82       7    2    4    1    8    5    3    6
count&#x3D;83       7    2    6    3    1    4    8    5
count&#x3D;84       7    3    1    6    8    5    2    4
count&#x3D;85       7    3    8    2    5    1    6    4
count&#x3D;86       7    4    2    5    8    1    3    6
count&#x3D;87       7    4    2    8    6    1    3    5
count&#x3D;88       7    5    3    1    6    8    2    4
count&#x3D;89       8    2    4    1    7    5    3    6
count&#x3D;90       8    2    5    3    1    7    4    6
count&#x3D;91       8    3    1    6    2    5    7    4
count&#x3D;92       8    4    1    3    6    2    7    5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>课程作业</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>实验</tag>
        <tag>栈</tag>
        <tag>队列</tag>
        <tag>停车场</tag>
        <tag>斐波那契数列</tag>
        <tag>N皇后问题</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构实验3—-数组与广义表</title>
    <url>/posts/5a6e9197/</url>
    <content><![CDATA[<blockquote>
<p>本系列文章广泛借鉴了各种教材和博客文章，由于完成时间比较久远，如果有遗漏标注的请联系我补充或删除解答。本文中解答仅供参考学习。</p>
</blockquote>
<h1 id="鞍点问题"><a href="#鞍点问题" class="headerlink" title="鞍点问题"></a>鞍点问题</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>若矩阵A中的某一元素<code>A[i,j]</code>是第i行中的最小值，而又是第j列中的最大值，则称<code>A[i,j]</code>是矩阵A中的一个鞍点。写出一个可以确定鞍点位置的程序。</p>
<h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">define</span> m 3</span>
<span class="token macro property">#<span class="token directive keyword">define</span> n 3</span>
<span class="token keyword">int</span> arr<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token comment">//矩阵</span>
	<span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span>
	<span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span>
	<span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> dstI <span class="token operator">=</span> i<span class="token punctuation">,</span> dstJ <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">int</span> minX <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		
		<span class="token comment">//找第i行的最小值(dstX,dstY)</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> minX<span class="token punctuation">)</span> 
			<span class="token punctuation">&#123;</span>
				minX <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
				dstI <span class="token operator">=</span> i<span class="token punctuation">;</span>
				dstJ <span class="token operator">=</span> j<span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token keyword">int</span> maxY <span class="token operator">=</span> arr<span class="token punctuation">[</span>dstI<span class="token punctuation">]</span><span class="token punctuation">[</span>dstJ<span class="token punctuation">]</span><span class="token punctuation">,</span>flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>

		<span class="token comment">//遍历dstJ列，查找有没有比arr[dstI][dstJ]大的数</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>dstJ<span class="token punctuation">]</span> <span class="token operator">></span> maxY<span class="token punctuation">)</span>
			<span class="token punctuation">&#123;</span>
				flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
				<span class="token keyword">break</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
		
		<span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"(%d,%d)"</span><span class="token punctuation">,</span> dstI<span class="token punctuation">,</span> dstJ<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>得到鞍点。在上文提到的测试矩阵中是<code>(0,2)</code>。</p>
<h1 id="稀疏矩阵转置"><a href="#稀疏矩阵转置" class="headerlink" title="稀疏矩阵转置"></a>稀疏矩阵转置</h1><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2><p>输入稀疏矩阵中每个元素的行号、列号、值，建立稀疏矩阵的三元组存储结构，并将此矩阵转置，显示转置前后的三元组结构。</p>
<h2 id="解答-1"><a href="#解答-1" class="headerlink" title="解答"></a>解答</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> _CRT_SECURE_NO_WARNINGS</span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">define</span>  MAXSIZE  12500</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span>  i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>      <span class="token comment">//该非零元的行下标和列下标</span>
	<span class="token keyword">int</span> value<span class="token punctuation">;</span>    <span class="token comment">// 该非零元的值</span>
<span class="token punctuation">&#125;</span> Triple<span class="token punctuation">;</span>  <span class="token comment">// 三元组类型</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	Triple data<span class="token punctuation">[</span>MAXSIZE <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> iTot<span class="token punctuation">;</span>
	<span class="token keyword">int</span> jTot<span class="token punctuation">;</span>
	<span class="token keyword">int</span>	numTot<span class="token punctuation">;</span> <span class="token comment">//行数，列数，非零元个数</span>
<span class="token punctuation">&#125;</span> TSMatrix<span class="token punctuation">;</span>  <span class="token comment">// 稀疏矩阵类型</span>

<span class="token keyword">int</span> <span class="token function">TransposeSMatrix</span><span class="token punctuation">(</span>TSMatrix M<span class="token punctuation">,</span> TSMatrix <span class="token operator">&amp;</span>T<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	T<span class="token punctuation">.</span>iTot <span class="token operator">=</span> M<span class="token punctuation">.</span>jTot<span class="token punctuation">;</span>
	T<span class="token punctuation">.</span>jTot <span class="token operator">=</span> M<span class="token punctuation">.</span>iTot<span class="token punctuation">;</span>
	T<span class="token punctuation">.</span>numTot <span class="token operator">=</span> M<span class="token punctuation">.</span>numTot<span class="token punctuation">;</span>
	<span class="token keyword">int</span> q <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>T<span class="token punctuation">.</span>numTot<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> col <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> col <span class="token operator">&lt;=</span> M<span class="token punctuation">.</span>jTot<span class="token punctuation">;</span> col<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> p <span class="token operator">&lt;=</span> M<span class="token punctuation">.</span>numTot<span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span>
			<span class="token punctuation">&#123;</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>M<span class="token punctuation">.</span>data<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>j <span class="token operator">==</span> col<span class="token punctuation">)</span>
				<span class="token punctuation">&#123;</span>
					T<span class="token punctuation">.</span>data<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">.</span>i <span class="token operator">=</span> M<span class="token punctuation">.</span>data<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>j<span class="token punctuation">;</span>
					T<span class="token punctuation">.</span>data<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">.</span>j <span class="token operator">=</span> M<span class="token punctuation">.</span>data<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>i<span class="token punctuation">;</span>
					T<span class="token punctuation">.</span>data<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> M<span class="token punctuation">.</span>data<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
					q<span class="token operator">++</span><span class="token punctuation">;</span>
				<span class="token punctuation">&#125;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">ShowSMatrix</span><span class="token punctuation">(</span>TSMatrix M<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> M<span class="token punctuation">.</span>iTot<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> M<span class="token punctuation">.</span>jTot<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>M<span class="token punctuation">.</span>data<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>i <span class="token operator">==</span> i <span class="token operator">&amp;&amp;</span> M<span class="token punctuation">.</span>data<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>j <span class="token operator">==</span> j<span class="token punctuation">)</span>
			<span class="token punctuation">&#123;</span>
				<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> M<span class="token punctuation">.</span>data<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
				p<span class="token operator">++</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
			<span class="token keyword">else</span>
			<span class="token punctuation">&#123;</span>
				<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	TSMatrix M<span class="token punctuation">,</span> T<span class="token punctuation">;</span>
	<span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"行数、列数、非零元个数：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>M<span class="token punctuation">.</span>iTot<span class="token punctuation">,</span> <span class="token operator">&amp;</span>M<span class="token punctuation">.</span>jTot<span class="token punctuation">,</span> <span class="token operator">&amp;</span>M<span class="token punctuation">.</span>numTot<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> temp <span class="token operator">&lt;=</span> M<span class="token punctuation">.</span>numTot<span class="token punctuation">;</span> temp<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>M<span class="token punctuation">.</span>data<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">.</span>i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>M<span class="token punctuation">.</span>data<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">.</span>j<span class="token punctuation">,</span> <span class="token operator">&amp;</span>M<span class="token punctuation">.</span>data<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"转置前\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">ShowSMatrix</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">TransposeSMatrix</span><span class="token punctuation">(</span>M<span class="token punctuation">,</span> T<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"转置后\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">ShowSMatrix</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="/posts/5a6e9197/2.png"></p>
<h1 id="广义表"><a href="#广义表" class="headerlink" title="广义表"></a>广义表</h1><h2 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h2><p>用头尾链表存储表示法建立广义表，输出广义表，求广义表的表头、广义表的表尾和广义表的深度。</p>
<h2 id="解答-2"><a href="#解答-2" class="headerlink" title="解答"></a>解答</h2><blockquote>
<p>这题我当时不会，大部分对着博客（<a href="https://blog.csdn.net/qq_20916555/article/details/51222492">广义表的创建 喜爱兰兰-CSDN博客 创建广义表</a>）学然后默写调通。现在把默写部分替换回原作者带有清晰注释的部分。求深度部分来自严蔚敏《数据结构》。</p>
</blockquote>
<pre class="line-numbers language-C" data-language="C"><code class="language-C">#define _CRT_SECURE_NO_WARNINGS
#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;
#include&lt;string.h&gt;
#define MAX_STR_LEN 100
typedef char AtomType;
typedef enum &#123; ATOM, LIST &#125; ElemTag;
&#x2F;&#x2F; ATOM&#x3D;&#x3D;0:原子, LIST&#x3D;&#x3D;1:子表
typedef struct GLNode &#123;
	ElemTag  tag;   &#x2F;&#x2F; 标志域
	union &#123;
		AtomType  atom;      &#x2F;&#x2F; 原子结点的数据域
		struct &#123; struct GLNode *hp, *tp; &#125; ptr;
	&#125;;
&#125; *GList;

char hstr[MAX_STR_LEN], istr[MAX_STR_LEN];

void SubString(char *substr, char *inputstr, int start, int end) 
&#123;	&#x2F;&#x2F;截取字符串中间内容，本程序中主要用于去头尾括号
	for (char *temp &#x3D; inputstr + start; temp &lt;&#x3D; inputstr + end; temp++)
	&#123;
		*substr &#x3D; *temp;
		*substr++;
	&#125;
	*substr &#x3D; &#39;\0&#39;;
&#125;
void SplitHeadStr(char *&amp;inputstr, char *&amp;headstr) 
&#123;
	&#x2F;&#x2F;将非空串inputstr分割成两个部分，headstr为第一个&#39;,&#39;之前的子串，inputstr为之后的字串
	int n &#x3D; strlen(inputstr);
	int i &#x3D; 0;
	int k &#x3D; 0; &#x2F;&#x2F;记录尚为配对的左括号的个数
	do &#123;
		&#x2F;&#x2F;找出最高层头尾分隔点
		&#x2F;&#x2F;由于字符串最外面没有括号，所以找到逗号的时候左右括号数应该相等，否则不是最高层
		if (inputstr[i] &#x3D;&#x3D; &#39;(&#39;)
			k++;
		else if (inputstr[i] &#x3D;&#x3D; &#39;)&#39;)
			k--;
		i++;
	&#125; while (i &lt; n &amp;&amp; (inputstr[i] !&#x3D; &#39;,&#39; || k !&#x3D; 0));

	if (i &lt; n) &#123;
		SubString(headstr, inputstr, 0, i - 1);
		SubString(inputstr, inputstr, i + 1, strlen(inputstr) - 1);
	&#125;
	else &#123;
		strcpy(headstr, inputstr);
		inputstr &#x3D; &#39;\0&#39;; 
	&#125;
&#125;
int CreateGList(GList &amp;L, char *s)
&#123;
	if (strcmp(s, &quot;()&quot;) &#x3D;&#x3D; 0)
		L &#x3D; NULL; &#x2F;&#x2F;建立空表
	else &#123;
		L &#x3D; (GList)malloc(sizeof(struct GLNode));  &#x2F;&#x2F;新建一个表结点 
		if (L &#x3D;&#x3D; NULL)
			return -1;
		if (strlen(s) &#x3D;&#x3D; 1) &#123; &#x2F;&#x2F;原子结点 
			L-&gt;tag &#x3D; ATOM;;
			L-&gt;atom &#x3D; *s;
		&#125;
		else &#123;
			char *headstr &#x3D; hstr;
			L-&gt;tag &#x3D; LIST;
			SubString(s, s, 1, strlen(s) - 2); &#x2F;&#x2F;脱去最外边的括号 
			GList pointer &#x3D; L;
			do &#123; &#x2F;&#x2F;创建子表 
				SplitHeadStr(s, headstr); &#x2F;&#x2F;headstr为分割后的表头，s为分割后的表尾 
				char tstr[MAX_STR_LEN];
				strcpy(tstr, headstr);
				CreateGList(pointer-&gt;ptr.hp, tstr);  &#x2F;&#x2F;递归创建表头 
				if (s !&#x3D; NULL &amp;&amp; strlen(s) !&#x3D; 0) &#123;  &#x2F;&#x2F;如果表尾不为空的话 
					GList tailnode &#x3D; (GList)malloc(sizeof(struct GLNode));
					if (pointer &#x3D;&#x3D; NULL)
						return -1;
					tailnode-&gt;tag &#x3D; LIST;  &#x2F;&#x2F;广义表的表尾肯定是一张表 
					pointer-&gt;ptr.tp &#x3D; tailnode;
					pointer &#x3D; tailnode; 
				&#125; 
			&#125; while (s !&#x3D; NULL &amp;&amp; strlen(s) !&#x3D; 0);  &#x2F;&#x2F;直到表尾为空NULL则退出 
			pointer-&gt;ptr.tp &#x3D; NULL;  &#x2F;&#x2F;最后将表尾赋值为NULL 
		&#125; 
	&#125;
	return 0;
&#125;

void PrintGList(const GList L) &#123;
	printf(&quot;(&quot;);
	GList pointer &#x3D; L;  
	do &#123;
		GList temp &#x3D; pointer-&gt;ptr.hp;
		if (temp !&#x3D; NULL) &#123;  &#x2F;&#x2F;递归输出表头中原子结点 
			if (temp-&gt;tag &#x3D;&#x3D; ATOM)
			&#123;
				printf(&quot;%c&quot;, temp-&gt;atom);
			&#125;
			else
			&#123;
				PrintGList(temp);
			&#125;
				
		&#125;
		if (pointer-&gt;ptr.tp !&#x3D; NULL)
		&#123;	&#x2F;&#x2F;后面还有
			printf(&quot;,&quot;);
		&#125;
		pointer &#x3D; pointer-&gt;ptr.tp;  &#x2F;&#x2F; 指针指向表尾,判断表尾是否空
	&#125; while (pointer !&#x3D; NULL);
	printf(&quot;)&quot;);
&#125;

int GetGListDepth(GList L)
&#123;
	if (!L)
		return 1;&#x2F;&#x2F;空表
	if (L-&gt;tag &#x3D;&#x3D; ATOM)
		return 0;&#x2F;&#x2F;原子
	int max &#x3D; 0;
	for (GList pp &#x3D; L; pp; pp &#x3D; pp-&gt;ptr.tp) 
	&#123;
		int dep &#x3D; GetGListDepth(pp-&gt;ptr.hp);
		if (dep &gt; max) &#123;
			max &#x3D; dep;&#x2F;&#x2F;每次找到表中遍历到深度最大的表，并用max记录
		&#125;
	&#125;
	return max + 1;
&#125;

int main() &#123;
	char s[100];
	scanf(&quot;%s&quot;, &amp;s);
	int left &#x3D; 0, right &#x3D; 0;
	for (int i &#x3D; 0; i &lt; strlen(s); i++)
	&#123;
		if (s[i] &#x3D;&#x3D; &#39;(&#39;)
			left++;
		if (s[i] &#x3D;&#x3D; &#39;)&#39;)
			right++;
	&#125;
	if (left !&#x3D; right)
	&#123;
		printf(&quot;error&quot;);
		return -1;
	&#125;
	strcpy(istr, s);
	GList L;
	char *head&#x3D;(char*)malloc(MAX_STR_LEN*sizeof(char)), *tail&#x3D;(char*)malloc(MAX_STR_LEN * sizeof(char));
	strcpy(tail, istr);
	CreateGList(L, istr);
	SubString(tail, tail, 1, strlen(tail) - 2);
	printf(&quot;广义表:&quot;);
	PrintGList(L);
	SplitHeadStr(tail, head);
	printf(&quot;\nhead:%s\ntail:%s\n&quot;,head,tail);
	printf(&quot;\n深度：%d&quot;, GetGListDepth(L));
	return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><img src="/posts/5a6e9197/3.png"></p>
<blockquote>
<p>后面部分内容都遗失了，就到这里吧。</p>
</blockquote>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>课程作业</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数组</tag>
        <tag>广义表</tag>
        <tag>鞍点</tag>
        <tag>稀疏矩阵转置</tag>
      </tags>
  </entry>
  <entry>
    <title>生成 Outline 客户端的 accesskey</title>
    <url>/posts/18ecdccb/</url>
    <content><![CDATA[<p>Outline作为一款底层是ss的第三方梯子客户端，但是却不支持直接输入服务器信息，而是要输入ss://access-key。</p>
<p><img src="/posts/18ecdccb/1.png" alt="1"></p>
<p>在翻阅了ss的文档后，找到了<a href="https://shadowsocks.org/en/spec/SIP002-URI-Scheme.html">SIP002 URI方案</a>：</p>
<pre class="line-numbers language-none"><code class="language-none">SS-URI &#x3D;&quot;ss:&#x2F;&#x2F;&quot;userinfo&quot;@&quot;hostname&quot;:&quot;port[ &quot;&#x2F;&quot; ][ &quot;?&quot; plugin ][ &quot;#&quot; tag ]userinfo&#x3D;websafe-base64-encode-utf8(method &quot;:&quot;password)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>也就是<code>SS：//base64加密(方法：密码)@主机名：端口</code></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>方法记录</category>
      </categories>
      <tags>
        <tag>OUTLINE</tag>
        <tag>shadowsocks</tag>
      </tags>
  </entry>
  <entry>
    <title>结合JDK源码学习单例模式</title>
    <url>/posts/ff220a60/</url>
    <content><![CDATA[<blockquote>
<p>本文JDK源码基于JDK17</p>
</blockquote>
<h1 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h1><p>使用<code>static</code>和<code>final</code>修饰实例变量，线程安全。但是可以被反射和反序列化破坏，以及如果一直不用会浪费内存。</p>
<h2 id="基本实现"><a href="#基本实现" class="headerlink" title="基本实现"></a>基本实现</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Singleton</span> INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
    <span class="token comment">//关键：构造方法私有</span>
    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">otherMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="JDK中的饿汉式单例模式"><a href="#JDK中的饿汉式单例模式" class="headerlink" title="JDK中的饿汉式单例模式"></a>JDK中的饿汉式单例模式</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// java.lang.Runtime</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Runtime</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Runtime</span> currentRuntime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Runtime</span> <span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> currentRuntime<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h1><p>简单，可以避免被反射和反序列化破坏。可以通过<code>Singleton.INSTANCE</code>直接调用。</p>
<h2 id="基本实现-1"><a href="#基本实现-1" class="headerlink" title="基本实现"></a>基本实现</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">enum</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>
    INSTANCE<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">otherMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="JDK中的枚举单例模式"><a href="#JDK中的枚举单例模式" class="headerlink" title="JDK中的枚举单例模式"></a>JDK中的枚举单例模式</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// java.util.Comparators$NaturalOrderComparator</span>
<span class="token keyword">enum</span> <span class="token class-name">NaturalOrderComparator</span> <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>
    INSTANCE<span class="token punctuation">;</span>

    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="双重检测锁（DCL）懒汉式"><a href="#双重检测锁（DCL）懒汉式" class="headerlink" title="双重检测锁（DCL）懒汉式"></a>双重检测锁（DCL）懒汉式</h1><p>两次检查保证只调用一次创建对象的方法，提高了效率。</p>
<h2 id="基本实现-2"><a href="#基本实现-2" class="headerlink" title="基本实现"></a>基本实现</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 必须加volatile，防止指令重排序</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">Singleton</span> INSTANCE<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 第一次检查</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>INSTANCE <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token comment">// 第二次检查</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>INSTANCE <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">otherMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="JDK中的DCL单例模式"><a href="#JDK中的DCL单例模式" class="headerlink" title="JDK中的DCL单例模式"></a>JDK中的DCL单例模式</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// java.lang.System</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">System</span> <span class="token punctuation">&#123;</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">Console</span> cons<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Console</span> <span class="token function">console</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Console</span> c<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">=</span> cons<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">=</span> cons<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    cons <span class="token operator">=</span> c <span class="token operator">=</span> <span class="token class-name">SharedSecrets</span><span class="token punctuation">.</span><span class="token function">getJavaIOAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">console</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> c<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h1><h2 id="基本实现-3"><a href="#基本实现-3" class="headerlink" title="基本实现"></a>基本实现</h2><p>利用jvm底层的类装载机制保证线程安全。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">InnerClass</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Singleton</span> INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token class-name">InnerClass</span><span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">otherMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="JDK中的静态内部类单例模式"><a href="#JDK中的静态内部类单例模式" class="headerlink" title="JDK中的静态内部类单例模式"></a>JDK中的静态内部类单例模式</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// java.util.Collections</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Collections</span> <span class="token punctuation">&#123;</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">EmptyNavigableSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token keyword">extends</span> <span class="token class-name">UnmodifiableNavigableSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>
		<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
		
		<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">NavigableSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> EMPTY_NAVIGABLE_SET <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EmptyNavigableSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token class-name">SortedSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token function">emptySortedSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">SortedSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> <span class="token class-name">UnmodifiableNavigableSet</span><span class="token punctuation">.</span>EMPTY_NAVIGABLE_SET<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="不推荐使用的实现方式"><a href="#不推荐使用的实现方式" class="headerlink" title="不推荐使用的实现方式"></a>不推荐使用的实现方式</h1><h2 id="线程不安全的懒汉式"><a href="#线程不安全的懒汉式" class="headerlink" title="线程不安全的懒汉式"></a>线程不安全的懒汉式</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> INSTANCE<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>INSTANCE <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        	INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">otherMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="使用同步方法的懒汉式"><a href="#使用同步方法的懒汉式" class="headerlink" title="使用同步方法的懒汉式"></a>使用同步方法的懒汉式</h2><p>效率非常低。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> INSTANCE<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
	
	<span class="token comment">// 在方法上加synchronized</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>INSTANCE <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        	INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">otherMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="单检测锁懒汉式"><a href="#单检测锁懒汉式" class="headerlink" title="单检测锁懒汉式"></a>单检测锁懒汉式</h2><p>线程不安全。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> INSTANCE<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>INSTANCE <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            	INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">otherMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><p><a href="https://my.oschina.net/u/4372568/blog/4488503">https://my.oschina.net/u/4372568/blog/4488503</a></p>
</li>
<li><p><a href="https://www.hollischuang.com/archives/1383">https://www.hollischuang.com/archives/1383</a></p>
</li>
<li><p><a href="https://www.bilibili.com/video/BV15b4y117RJ?p=62">https://www.bilibili.com/video/BV15b4y117RJ?p=62</a></p>
</li>
</ul>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>技术</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>单例模式</tag>
        <tag>JDK</tag>
        <tag>源码</tag>
      </tags>
  </entry>
  <entry>
    <title>计算二进制中1的个数</title>
    <url>/posts/34ac3997/</url>
    <content><![CDATA[<blockquote>
<p>相关题目：<a href="https://leetcode-cn.com/problems/number-of-1-bits/">191. 位1的个数 - 力扣（LeetCode）</a></p>
<p>编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为<a href="https://baike.baidu.com/item/%E6%B1%89%E6%98%8E%E9%87%8D%E9%87%8F">汉明重量</a>）。</p>
</blockquote>
<p>看题解时看到一种眼前一亮的方法：循环去掉最后一个1，计算循环次数。这种方法的核心在于如何高效去掉最后一个1，题解给出的方法是：<code>n&amp;n-1</code>。</p>
<p>如下图，n-1可以将n的最后一个1变为0，且将后面所有0变为1。将两数做按位与操作，则可高效去除最后一个1。</p>
<p><img src="/posts/34ac3997/eg.jpg" alt="例子" title="例子"></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>豆瓣apikey分享</title>
    <url>/posts/339a8b4c/</url>
    <content><![CDATA[<p>我的博客一直使用<code>hexo-douban</code>来生成读书页面，可是最近一段时间，页面变成了这样子。</p>
<p><img src="/posts/339a8b4c/1.jpg"></p>
<p>在查阅<code>/node_modules/hexo-douban/books-generator.js</code>后，发现抓取的API为<code>&#39;https://api.douban.com/v2/book/user/&#39; + user + &#39;/collections?start=&#39; + start + &#39;&amp;count=100&#39;</code></p>
<p>在浏览器中访问API，发现返回<code>invalid_apikey</code></p>
<p><img src="/posts/339a8b4c/2.jpg"></p>
<p>在网络搜索后发现了一个可以用的key:</p>
<pre class="line-numbers language-none"><code class="language-none">0df993c66c0c636e29ecbb5344252a4a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>也就是说，将第21行的API地址改为<code>&#39;https://api.douban.com/v2/book/user/&#39; + user + &#39;/collections?apikey=0df993c66c0c636e29ecbb5344252a4a&amp;start=&#39; + start + &#39;&amp;count=100&#39;</code>即可解决。</p>
<p>最后，推荐一下这个插件，挺好用的。</p>
<div style="text-align: center">
  <div class="github-card" data-user="mythsman" data-repo="hexo-douban" data-height="200" data-width="400" data-theme="default" data-target data-client-id data-client-secret></div>
</div>
<script src="/github-card-lib/githubcard.js"></script>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>博客相关</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>豆瓣</tag>
        <tag>apikey</tag>
      </tags>
  </entry>
  <entry>
    <title>通过merge方法实现HashMap的value自增</title>
    <url>/posts/5f2205e5/</url>
    <content><![CDATA[<h1 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h1><p>在水leetcode的时候，想要实现map里指定key对应的value自增的功能。</p>
<p>最开始想到的是之前经常使用的写法：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">myMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>myKey<span class="token punctuation">,</span>myMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>myKey<span class="token punctuation">)</span><span class="token operator">?</span>myMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>myKey<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>忽然想到前几天看到的<code>merge</code>方法，决得应该会实现得更优雅。搜索发现果然可以：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">myMap<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>myKey<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">sum</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h1 id="Map-merge"><a href="#Map-merge" class="headerlink" title="Map.merge()"></a>Map.merge()</h1><p>在<code>java.util.Map</code>可以找到merge方法的源码：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">default</span> <span class="token class-name">V</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span>
                <span class="token class-name">BiFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">V</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">V</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> remappingFunction<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>remappingFunction<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">V</span> oldValue <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">V</span> newValue <span class="token operator">=</span> <span class="token punctuation">(</span>oldValue <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> value <span class="token operator">:</span>
    remappingFunction<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>oldValue<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>newValue <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> newValue<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到，merge的作用就是：1. 当value参数空时，删除key对应的键值对；2. 判断是否有对应的key，如果没有，插入(key, value)；3. 如果原来有对应的key，根据旧值与value计算出新值，插入(key, newValue)。</p>
<h1 id="Integer-sum"><a href="#Integer-sum" class="headerlink" title="Integer::sum"></a>Integer::sum</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://www.cnblogs.com/guofu-angela/p/9432668.html">[Java基础]让Map value自增 - 安琪拉的博客(公众号) - 博客园</a></li>
<li><a href="https://www.cnblogs.com/goodAndyxublog/p/14444892.html">别再这么写代码了，这几个方法不香吗？ - 楼下小黑哥 - 博客园</a></li>
</ol>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>技术</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>map</tag>
        <tag>merge</tag>
      </tags>
  </entry>
</search>
